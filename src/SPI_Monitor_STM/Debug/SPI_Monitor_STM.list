
SPI_Monitor_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cd4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08005ea4  08005ea4  00006ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f6c  08005f6c  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f6c  08005f6c  00006f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f74  08005f74  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f74  08005f74  00006f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f78  08005f78  00006f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005f7c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c0  2000005c  08005fd8  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a1c  08005fd8  00007a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f54  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000270f  00000000  00000000  00019fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  0001c6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce9  00000000  00000000  0001d778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c11a  00000000  00000000  0001e461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160f1  00000000  00000000  0004a57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115833  00000000  00000000  0006066c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00175e9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aa0  00000000  00000000  00175ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0017a984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005e8c 	.word	0x08005e8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08005e8c 	.word	0x08005e8c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Queue_Is_Empty>:
    __IO int read_index;
    __IO int write_index;
    uint8_t buffer[BUFFER_SIZE];
} uint8_queue_t; // FIFO circular queue

char Queue_Is_Empty(uint8_queue_t *cb) {
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	return cb->write_index == cb->read_index;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	685a      	ldr	r2, [r3, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	bf0c      	ite	eq
 80005c4:	2301      	moveq	r3, #1
 80005c6:	2300      	movne	r3, #0
 80005c8:	b2db      	uxtb	r3, r3
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <Queue_Is_Full>:

char Queue_Is_Full(uint8_queue_t *cb) {
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
	return ((cb->write_index + 1) % BUFFER_SIZE) == cb->read_index;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	3301      	adds	r3, #1
 80005e4:	425a      	negs	r2, r3
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	bf58      	it	pl
 80005ec:	4253      	negpl	r3, r2
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	6812      	ldr	r2, [r2, #0]
 80005f2:	4293      	cmp	r3, r2
 80005f4:	bf0c      	ite	eq
 80005f6:	2301      	moveq	r3, #1
 80005f8:	2300      	movne	r3, #0
 80005fa:	b2db      	uxtb	r3, r3
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <Queue_Num_Read>:

int Queue_Num_Read(uint8_queue_t *cb) {
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	return (BUFFER_SIZE + cb->write_index - cb->read_index) % BUFFER_SIZE;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	425a      	negs	r2, r3
 8000620:	b2db      	uxtb	r3, r3
 8000622:	b2d2      	uxtb	r2, r2
 8000624:	bf58      	it	pl
 8000626:	4253      	negpl	r3, r2
}
 8000628:	4618      	mov	r0, r3
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <Queue_Pos_Write>:

uint8_t* Queue_Pos_Write(uint8_queue_t *cb) {
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	return cb->buffer + cb->write_index;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3308      	adds	r3, #8
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	6852      	ldr	r2, [r2, #4]
 8000644:	4413      	add	r3, r2
}
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <Queue_Pos_Read>:

uint8_t* Queue_Pos_Read(uint8_queue_t *cb) {
 8000652:	b480      	push	{r7}
 8000654:	b083      	sub	sp, #12
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
	return cb->buffer + cb->read_index;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3308      	adds	r3, #8
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	6812      	ldr	r2, [r2, #0]
 8000662:	4413      	add	r3, r2
}
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <Queue_Append>:

char Queue_Append(uint8_queue_t *cb, uint8_t data) { // return success of appending
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	70fb      	strb	r3, [r7, #3]
    if (Queue_Is_Full(cb)) {
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff ffaa 	bl	80005d6 <Queue_Is_Full>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <Queue_Append+0x1c>
        return false;
 8000688:	2300      	movs	r3, #0
 800068a:	e010      	b.n	80006ae <Queue_Append+0x3e>
    }
    cb->buffer[cb->write_index] = data;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	4413      	add	r3, r2
 8000694:	78fa      	ldrb	r2, [r7, #3]
 8000696:	721a      	strb	r2, [r3, #8]
    cb->write_index = (cb->write_index + 1) % BUFFER_SIZE;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	3301      	adds	r3, #1
 800069e:	425a      	negs	r2, r3
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	bf58      	it	pl
 80006a6:	4253      	negpl	r3, r2
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	6053      	str	r3, [r2, #4]
    return true;
 80006ac:	2301      	movs	r3, #1
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <Queue_Pop>:

char Queue_Pop(uint8_queue_t *cb) { // return pop'ed data
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b084      	sub	sp, #16
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
    if (Queue_Is_Empty(cb)) {
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f7ff ff76 	bl	80005b0 <Queue_Is_Empty>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <Queue_Pop+0x18>
        return 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	e010      	b.n	80006f0 <Queue_Pop+0x3a>
    }
    char data = cb->buffer[cb->read_index];
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	7a1b      	ldrb	r3, [r3, #8]
 80006d8:	73fb      	strb	r3, [r7, #15]
    cb->read_index = (cb->read_index + 1) % BUFFER_SIZE;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	425a      	negs	r2, r3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	b2d2      	uxtb	r2, r2
 80006e6:	bf58      	it	pl
 80006e8:	4253      	negpl	r3, r2
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	6013      	str	r3, [r2, #0]
    return data;
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <Print_Buffer>:

volatile uint8_t spi_ready = 0;


/*Print buffer for debugging purpose*/
void Print_Buffer(uint8_queue_t* buf, char* label) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af02      	add	r7, sp, #8
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
    static char temp_buf[1024] = {0};  // 버퍼의 내용을 저장할 임시 배열
    int idx = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]

    // 라벨 출력: "Label: " 형식으로 버퍼 내용을 시작
    idx += sprintf(temp_buf + idx, "[%s(%d, %d): ", label, buf->read_index, buf->write_index);
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	4a21      	ldr	r2, [pc, #132]	@ (8000790 <Print_Buffer+0x98>)
 800070a:	1898      	adds	r0, r3, r2
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	4613      	mov	r3, r2
 8000718:	683a      	ldr	r2, [r7, #0]
 800071a:	491e      	ldr	r1, [pc, #120]	@ (8000794 <Print_Buffer+0x9c>)
 800071c:	f004 ff16 	bl	800554c <siprintf>
 8000720:	4602      	mov	r2, r0
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	4413      	add	r3, r2
 8000726:	60fb      	str	r3, [r7, #12]

    // 버퍼 내 데이터를 읽고 임시 배열에 추가
//    volatile int i = buf->read_index;
    for (int i = buf->read_index; i != buf->write_index; i = (i + 1) % BUFFER_SIZE) {
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	e017      	b.n	8000760 <Print_Buffer+0x68>
        idx += sprintf(temp_buf + idx, "%02X ", buf->buffer[i]);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	4a17      	ldr	r2, [pc, #92]	@ (8000790 <Print_Buffer+0x98>)
 8000734:	1898      	adds	r0, r3, r2
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	4413      	add	r3, r2
 800073c:	3308      	adds	r3, #8
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	4915      	ldr	r1, [pc, #84]	@ (8000798 <Print_Buffer+0xa0>)
 8000744:	f004 ff02 	bl	800554c <siprintf>
 8000748:	4602      	mov	r2, r0
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	4413      	add	r3, r2
 800074e:	60fb      	str	r3, [r7, #12]
    for (int i = buf->read_index; i != buf->write_index; i = (i + 1) % BUFFER_SIZE) {
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	3301      	adds	r3, #1
 8000754:	425a      	negs	r2, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	bf58      	it	pl
 800075c:	4253      	negpl	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	68ba      	ldr	r2, [r7, #8]
 8000766:	429a      	cmp	r2, r3
 8000768:	d1e2      	bne.n	8000730 <Print_Buffer+0x38>
    }

    // 줄바꿈 추가하여 가독성을 높임
    sprintf(temp_buf + idx, "]\r\n");
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	4a08      	ldr	r2, [pc, #32]	@ (8000790 <Print_Buffer+0x98>)
 800076e:	4413      	add	r3, r2
 8000770:	490a      	ldr	r1, [pc, #40]	@ (800079c <Print_Buffer+0xa4>)
 8000772:	4618      	mov	r0, r3
 8000774:	f004 feea 	bl	800554c <siprintf>

    // UART로 전송 (temp_buf 내용 전체를 시리얼 모니터로 출력)
//    TSART_Tx((uint8_t*)temp_buf, strlen(temp_buf));
	TSART_Tx(temp_buf, strlen(temp_buf));
 8000778:	4805      	ldr	r0, [pc, #20]	@ (8000790 <Print_Buffer+0x98>)
 800077a:	f7ff fd49 	bl	8000210 <strlen>
 800077e:	4603      	mov	r3, r0
 8000780:	4619      	mov	r1, r3
 8000782:	4803      	ldr	r0, [pc, #12]	@ (8000790 <Print_Buffer+0x98>)
 8000784:	f000 f80c 	bl	80007a0 <TSART_Tx>
}
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000480 	.word	0x20000480
 8000794:	08005ea4 	.word	0x08005ea4
 8000798:	08005eb4 	.word	0x08005eb4
 800079c:	08005ebc 	.word	0x08005ebc

080007a0 <TSART_Tx>:

/* USER CODE BEGIN PFP */

// Serial parts
void TSART_Tx(uint8_t* buffer, uint8_t size)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(&huart1, buffer, size, HAL_MAX_DELAY);
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007b4:	6879      	ldr	r1, [r7, #4]
 80007b6:	4803      	ldr	r0, [pc, #12]	@ (80007c4 <TSART_Tx+0x24>)
 80007b8:	f003 fc2c 	bl	8004014 <HAL_UART_Transmit>
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200000dc 	.word	0x200000dc

080007c8 <TSART_Rx_Start>:
void TSART_Rx_Start(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
	uint8_queue_t* rx_buf = &usart2spi_buf;
 80007ce:	4b07      	ldr	r3, [pc, #28]	@ (80007ec <TSART_Rx_Start+0x24>)
 80007d0:	607b      	str	r3, [r7, #4]
	HAL_UART_Receive_IT(&huart1, Queue_Pos_Write(rx_buf), 1);
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff ff2e 	bl	8000634 <Queue_Pos_Write>
 80007d8:	4603      	mov	r3, r0
 80007da:	2201      	movs	r2, #1
 80007dc:	4619      	mov	r1, r3
 80007de:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <TSART_Rx_Start+0x28>)
 80007e0:	f003 fca1 	bl	8004126 <HAL_UART_Receive_IT>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000164 	.word	0x20000164
 80007f0:	200000dc 	.word	0x200000dc

080007f4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	uint8_queue_t* rx_buf = &usart2spi_buf;
 80007fc:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <HAL_UART_RxCpltCallback+0x60>)
 80007fe:	60fb      	str	r3, [r7, #12]
    if (huart->Instance == USART1)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a14      	ldr	r2, [pc, #80]	@ (8000858 <HAL_UART_RxCpltCallback+0x64>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d11f      	bne.n	800084a <HAL_UART_RxCpltCallback+0x56>
    {
    	if (!Queue_Is_Full(rx_buf) && *Queue_Pos_Write(rx_buf) != 0)
 800080a:	68f8      	ldr	r0, [r7, #12]
 800080c:	f7ff fee3 	bl	80005d6 <Queue_Is_Full>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d110      	bne.n	8000838 <HAL_UART_RxCpltCallback+0x44>
 8000816:	68f8      	ldr	r0, [r7, #12]
 8000818:	f7ff ff0c 	bl	8000634 <Queue_Pos_Write>
 800081c:	4603      	mov	r3, r0
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d009      	beq.n	8000838 <HAL_UART_RxCpltCallback+0x44>
    	{
    		rx_buf->write_index = (rx_buf->write_index+1) % BUFFER_SIZE; // if full, overwrite last bit
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	3301      	adds	r3, #1
 800082a:	425a      	negs	r2, r3
 800082c:	b2db      	uxtb	r3, r3
 800082e:	b2d2      	uxtb	r2, r2
 8000830:	bf58      	it	pl
 8000832:	4253      	negpl	r3, r2
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	6053      	str	r3, [r2, #4]
    	}
		HAL_UART_Receive_IT(&huart1, Queue_Pos_Write(rx_buf), 1);
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f7ff fefb 	bl	8000634 <Queue_Pos_Write>
 800083e:	4603      	mov	r3, r0
 8000840:	2201      	movs	r2, #1
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	@ (800085c <HAL_UART_RxCpltCallback+0x68>)
 8000846:	f003 fc6e 	bl	8004126 <HAL_UART_Receive_IT>
    }
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000164 	.word	0x20000164
 8000858:	40011000 	.word	0x40011000
 800085c:	200000dc 	.word	0x200000dc

08000860 <SPI2_TxRx_Start>:

// SPI parts

void SPI2_TxRx_Start(void)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
#ifdef MASTER_BOARD
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
#else
	if (!spi_ready) {return;}
 8000866:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <SPI2_TxRx_Start+0x8c>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	2b00      	cmp	r3, #0
 800086e:	d038      	beq.n	80008e2 <SPI2_TxRx_Start+0x82>
#endif
	uint8_queue_t* rx_buf = &spi2usart_buf;
 8000870:	4b1f      	ldr	r3, [pc, #124]	@ (80008f0 <SPI2_TxRx_Start+0x90>)
 8000872:	60fb      	str	r3, [r7, #12]
	uint8_queue_t* tx_buf = &usart2spi_buf;
 8000874:	4b1f      	ldr	r3, [pc, #124]	@ (80008f4 <SPI2_TxRx_Start+0x94>)
 8000876:	60bb      	str	r3, [r7, #8]

	if (!Queue_Is_Empty(tx_buf))
 8000878:	68b8      	ldr	r0, [r7, #8]
 800087a:	f7ff fe99 	bl	80005b0 <Queue_Is_Empty>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d124      	bne.n	80008ce <SPI2_TxRx_Start+0x6e>
	{
		Queue_Append(&echo_buf, *Queue_Pos_Read(tx_buf));
 8000884:	68b8      	ldr	r0, [r7, #8]
 8000886:	f7ff fee4 	bl	8000652 <Queue_Pos_Read>
 800088a:	4603      	mov	r3, r0
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	4619      	mov	r1, r3
 8000890:	4819      	ldr	r0, [pc, #100]	@ (80008f8 <SPI2_TxRx_Start+0x98>)
 8000892:	f7ff feed 	bl	8000670 <Queue_Append>
		int prev_read_index = tx_buf->read_index;
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	607b      	str	r3, [r7, #4]
		tx_buf->read_index = (tx_buf->read_index+1) % BUFFER_SIZE;
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	3301      	adds	r3, #1
 80008a2:	425a      	negs	r2, r3
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	b2d2      	uxtb	r2, r2
 80008a8:	bf58      	it	pl
 80008aa:	4253      	negpl	r3, r2
 80008ac:	68ba      	ldr	r2, [r7, #8]
 80008ae:	6013      	str	r3, [r2, #0]

//		HAL_Delay(1);

		HAL_SPI_TransmitReceive_IT(&hspi2, tx_buf->buffer + prev_read_index, Queue_Pos_Write(rx_buf), 1);
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	f103 0208 	add.w	r2, r3, #8
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	18d4      	adds	r4, r2, r3
 80008ba:	68f8      	ldr	r0, [r7, #12]
 80008bc:	f7ff feba 	bl	8000634 <Queue_Pos_Write>
 80008c0:	4602      	mov	r2, r0
 80008c2:	2301      	movs	r3, #1
 80008c4:	4621      	mov	r1, r4
 80008c6:	480d      	ldr	r0, [pc, #52]	@ (80008fc <SPI2_TxRx_Start+0x9c>)
 80008c8:	f002 fbb4 	bl	8003034 <HAL_SPI_TransmitReceive_IT>
 80008cc:	e00a      	b.n	80008e4 <SPI2_TxRx_Start+0x84>
	}
	else
	{
		HAL_SPI_TransmitReceive_IT(&hspi2, "\0", Queue_Pos_Write(rx_buf), 1);
 80008ce:	68f8      	ldr	r0, [r7, #12]
 80008d0:	f7ff feb0 	bl	8000634 <Queue_Pos_Write>
 80008d4:	4602      	mov	r2, r0
 80008d6:	2301      	movs	r3, #1
 80008d8:	4909      	ldr	r1, [pc, #36]	@ (8000900 <SPI2_TxRx_Start+0xa0>)
 80008da:	4808      	ldr	r0, [pc, #32]	@ (80008fc <SPI2_TxRx_Start+0x9c>)
 80008dc:	f002 fbaa 	bl	8003034 <HAL_SPI_TransmitReceive_IT>
 80008e0:	e000      	b.n	80008e4 <SPI2_TxRx_Start+0x84>
	if (!spi_ready) {return;}
 80008e2:	bf00      	nop
	}

}
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd90      	pop	{r4, r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000047c 	.word	0x2000047c
 80008f0:	20000374 	.word	0x20000374
 80008f4:	20000164 	.word	0x20000164
 80008f8:	2000026c 	.word	0x2000026c
 80008fc:	20000078 	.word	0x20000078
 8000900:	08005ec0 	.word	0x08005ec0

08000904 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	uint8_queue_t* rx_buf = &spi2usart_buf;
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <HAL_SPI_TxRxCpltCallback+0x50>)
 800090e:	60fb      	str	r3, [r7, #12]
    if (hspi->Instance == SPI2)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a10      	ldr	r2, [pc, #64]	@ (8000958 <HAL_SPI_TxRxCpltCallback+0x54>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d118      	bne.n	800094c <HAL_SPI_TxRxCpltCallback+0x48>
    {
    	if (!Queue_Is_Full(rx_buf) && *Queue_Pos_Write(rx_buf) != 0)
 800091a:	68f8      	ldr	r0, [r7, #12]
 800091c:	f7ff fe5b 	bl	80005d6 <Queue_Is_Full>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d110      	bne.n	8000948 <HAL_SPI_TxRxCpltCallback+0x44>
 8000926:	68f8      	ldr	r0, [r7, #12]
 8000928:	f7ff fe84 	bl	8000634 <Queue_Pos_Write>
 800092c:	4603      	mov	r3, r0
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d009      	beq.n	8000948 <HAL_SPI_TxRxCpltCallback+0x44>
		{
    		rx_buf->write_index = (rx_buf->write_index+1) % BUFFER_SIZE; /*circular buffer*/
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	3301      	adds	r3, #1
 800093a:	425a      	negs	r2, r3
 800093c:	b2db      	uxtb	r3, r3
 800093e:	b2d2      	uxtb	r2, r2
 8000940:	bf58      	it	pl
 8000942:	4253      	negpl	r3, r2
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	6053      	str	r3, [r2, #4]
    	{
    		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET); // transmission end
    		return;
    	}
#endif
    	SPI2_TxRx_Start();
 8000948:	f7ff ff8a 	bl	8000860 <SPI2_TxRx_Start>
    }
}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000374 	.word	0x20000374
 8000958:	40003800 	.word	0x40003800

0800095c <EXTI9_5_IRQHandler>:


#ifndef MASTER_BOARD // for slave. automatically SPI is ready when CS low

void EXTI9_5_IRQHandler(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(SPI2_CS_Pin);
 8000960:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000964:	f001 f996 	bl	8001c94 <HAL_GPIO_EXTI_IRQHandler>
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}

0800096c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == SPI2_CS_Pin) {
 8000976:	88fb      	ldrh	r3, [r7, #6]
 8000978:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800097c:	d110      	bne.n	80009a0 <HAL_GPIO_EXTI_Callback+0x34>
    	if (HAL_GPIO_ReadPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin) == GPIO_PIN_RESET) // SPI 통신 준비 상
 800097e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000982:	4809      	ldr	r0, [pc, #36]	@ (80009a8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000984:	f001 f954 	bl	8001c30 <HAL_GPIO_ReadPin>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d105      	bne.n	800099a <HAL_GPIO_EXTI_Callback+0x2e>
		{
    		spi_ready = 1;
 800098e:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <HAL_GPIO_EXTI_Callback+0x40>)
 8000990:	2201      	movs	r2, #1
 8000992:	701a      	strb	r2, [r3, #0]
    		SPI2_TxRx_Start();
 8000994:	f7ff ff64 	bl	8000860 <SPI2_TxRx_Start>
//    	else if (HAL_GPIO_ReadPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin) == GPIO_PIN_SET)
//    	{
//    		HAL_SPI_Abort_IT(&hspi2);
//    	}
    }
}
 8000998:	e002      	b.n	80009a0 <HAL_GPIO_EXTI_Callback+0x34>
    		spi_ready = 0;
 800099a:	4b04      	ldr	r3, [pc, #16]	@ (80009ac <HAL_GPIO_EXTI_Callback+0x40>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40020000 	.word	0x40020000
 80009ac:	2000047c 	.word	0x2000047c

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b6:	f000 fdee 	bl	8001596 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ba:	f000 f891 	bl	8000ae0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009be:	f000 f901 	bl	8000bc4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c2:	f000 f99d 	bl	8000d00 <MX_GPIO_Init>
  MX_SPI2_Init();
 80009c6:	f000 f92f 	bl	8000c28 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80009ca:	f000 f969 	bl	8000ca0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_queue_t* tx_buf = &usart2spi_buf;
 80009ce:	4b3a      	ldr	r3, [pc, #232]	@ (8000ab8 <main+0x108>)
 80009d0:	60fb      	str	r3, [r7, #12]
  uint8_queue_t* rx_buf = &spi2usart_buf;
 80009d2:	4b3a      	ldr	r3, [pc, #232]	@ (8000abc <main+0x10c>)
 80009d4:	60bb      	str	r3, [r7, #8]

  TSART_Rx_Start(); // USB serial on
 80009d6:	f7ff fef7 	bl	80007c8 <TSART_Rx_Start>
	{
		SPI2_TxRx_Start();
	}
#endif
	// echo_buf (UART 로 부터 받은 msg 저장) 에 msg가 차있으면,
	if (Queue_Is_Full(&echo_buf) || (!Queue_Is_Empty(&echo_buf) && *(Queue_Pos_Write(&echo_buf)-1)=='\n'))
 80009da:	4839      	ldr	r0, [pc, #228]	@ (8000ac0 <main+0x110>)
 80009dc:	f7ff fdfb 	bl	80005d6 <Queue_Is_Full>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d10d      	bne.n	8000a02 <main+0x52>
 80009e6:	4836      	ldr	r0, [pc, #216]	@ (8000ac0 <main+0x110>)
 80009e8:	f7ff fde2 	bl	80005b0 <Queue_Is_Empty>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d130      	bne.n	8000a54 <main+0xa4>
 80009f2:	4833      	ldr	r0, [pc, #204]	@ (8000ac0 <main+0x110>)
 80009f4:	f7ff fe1e 	bl	8000634 <Queue_Pos_Write>
 80009f8:	4603      	mov	r3, r0
 80009fa:	3b01      	subs	r3, #1
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b0a      	cmp	r3, #10
 8000a00:	d128      	bne.n	8000a54 <main+0xa4>
	{
		TSART_Tx("Condition1\n", strlen("Condition1\n"));
 8000a02:	210b      	movs	r1, #11
 8000a04:	482f      	ldr	r0, [pc, #188]	@ (8000ac4 <main+0x114>)
 8000a06:	f7ff fecb 	bl	80007a0 <TSART_Tx>
		TSART_Tx("M<:", strlen("M<:"));
		Print_Buffer(&echo_buf, "Echo Buffer (Master)");
		Print_Buffer(tx_buf, "TX Buffer (Master)");
		Print_Buffer(rx_buf, "RX Buffer (Master)");
#else
		TSART_Tx("S<:", strlen("S<:"));
 8000a0a:	2103      	movs	r1, #3
 8000a0c:	482e      	ldr	r0, [pc, #184]	@ (8000ac8 <main+0x118>)
 8000a0e:	f7ff fec7 	bl	80007a0 <TSART_Tx>
		Print_Buffer(&echo_buf, "Echo Buffer (Slave)");
 8000a12:	492e      	ldr	r1, [pc, #184]	@ (8000acc <main+0x11c>)
 8000a14:	482a      	ldr	r0, [pc, #168]	@ (8000ac0 <main+0x110>)
 8000a16:	f7ff fe6f 	bl	80006f8 <Print_Buffer>
		Print_Buffer(tx_buf, "TX Buffer (Slave)");
 8000a1a:	492d      	ldr	r1, [pc, #180]	@ (8000ad0 <main+0x120>)
 8000a1c:	68f8      	ldr	r0, [r7, #12]
 8000a1e:	f7ff fe6b 	bl	80006f8 <Print_Buffer>
		Print_Buffer(rx_buf, "RX Buffer (Slave)");
 8000a22:	492c      	ldr	r1, [pc, #176]	@ (8000ad4 <main+0x124>)
 8000a24:	68b8      	ldr	r0, [r7, #8]
 8000a26:	f7ff fe67 	bl	80006f8 <Print_Buffer>
#endif
		for (int read_num = Queue_Num_Read(&echo_buf); read_num > 0; read_num--)
 8000a2a:	4825      	ldr	r0, [pc, #148]	@ (8000ac0 <main+0x110>)
 8000a2c:	f7ff fdec 	bl	8000608 <Queue_Num_Read>
 8000a30:	6178      	str	r0, [r7, #20]
 8000a32:	e00c      	b.n	8000a4e <main+0x9e>
		{
			pop_buf = Queue_Pop(&echo_buf);
 8000a34:	4822      	ldr	r0, [pc, #136]	@ (8000ac0 <main+0x110>)
 8000a36:	f7ff fe3e 	bl	80006b6 <Queue_Pop>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
			TSART_Tx(&pop_buf, 1);
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	2101      	movs	r1, #1
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff feac 	bl	80007a0 <TSART_Tx>
		for (int read_num = Queue_Num_Read(&echo_buf); read_num > 0; read_num--)
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	dcef      	bgt.n	8000a34 <main+0x84>
		}
	}
//	Print_Buffer(rx_buf, "RX Buffer");
	if (Queue_Is_Full(rx_buf) || (!Queue_Is_Empty(rx_buf) && *(Queue_Pos_Write(rx_buf)-1)=='\n'))
 8000a54:	68b8      	ldr	r0, [r7, #8]
 8000a56:	f7ff fdbe 	bl	80005d6 <Queue_Is_Full>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d10d      	bne.n	8000a7c <main+0xcc>
 8000a60:	68b8      	ldr	r0, [r7, #8]
 8000a62:	f7ff fda5 	bl	80005b0 <Queue_Is_Empty>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1b6      	bne.n	80009da <main+0x2a>
 8000a6c:	68b8      	ldr	r0, [r7, #8]
 8000a6e:	f7ff fde1 	bl	8000634 <Queue_Pos_Write>
 8000a72:	4603      	mov	r3, r0
 8000a74:	3b01      	subs	r3, #1
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b0a      	cmp	r3, #10
 8000a7a:	d1ae      	bne.n	80009da <main+0x2a>
	{
	TSART_Tx("Condition2\n", strlen("Condition2\n"));
 8000a7c:	210b      	movs	r1, #11
 8000a7e:	4816      	ldr	r0, [pc, #88]	@ (8000ad8 <main+0x128>)
 8000a80:	f7ff fe8e 	bl	80007a0 <TSART_Tx>
#ifdef MASTER_BOARD
		TSART_Tx("M>:", strlen("M>:"));

#else
		TSART_Tx("S>:", strlen("S>:"));
 8000a84:	2103      	movs	r1, #3
 8000a86:	4815      	ldr	r0, [pc, #84]	@ (8000adc <main+0x12c>)
 8000a88:	f7ff fe8a 	bl	80007a0 <TSART_Tx>

#endif
		for (int read_num = Queue_Num_Read(rx_buf); read_num > 0; read_num--)
 8000a8c:	68b8      	ldr	r0, [r7, #8]
 8000a8e:	f7ff fdbb 	bl	8000608 <Queue_Num_Read>
 8000a92:	6138      	str	r0, [r7, #16]
 8000a94:	e00c      	b.n	8000ab0 <main+0x100>
		{
			pop_buf = Queue_Pop(rx_buf);
 8000a96:	68b8      	ldr	r0, [r7, #8]
 8000a98:	f7ff fe0d 	bl	80006b6 <Queue_Pop>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	71fb      	strb	r3, [r7, #7]
			TSART_Tx(&pop_buf, 1);
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe7b 	bl	80007a0 <TSART_Tx>
		for (int read_num = Queue_Num_Read(rx_buf); read_num > 0; read_num--)
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	dcef      	bgt.n	8000a96 <main+0xe6>
	if (Queue_Is_Full(&echo_buf) || (!Queue_Is_Empty(&echo_buf) && *(Queue_Pos_Write(&echo_buf)-1)=='\n'))
 8000ab6:	e790      	b.n	80009da <main+0x2a>
 8000ab8:	20000164 	.word	0x20000164
 8000abc:	20000374 	.word	0x20000374
 8000ac0:	2000026c 	.word	0x2000026c
 8000ac4:	08005ec4 	.word	0x08005ec4
 8000ac8:	08005ed0 	.word	0x08005ed0
 8000acc:	08005ed4 	.word	0x08005ed4
 8000ad0:	08005ee8 	.word	0x08005ee8
 8000ad4:	08005efc 	.word	0x08005efc
 8000ad8:	08005f10 	.word	0x08005f10
 8000adc:	08005f1c 	.word	0x08005f1c

08000ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b094      	sub	sp, #80	@ 0x50
 8000ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae6:	f107 0320 	add.w	r3, r7, #32
 8000aea:	2230      	movs	r2, #48	@ 0x30
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f004 fd4c 	bl	800558c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b04:	f001 f8de 	bl	8001cc4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b08:	4b2c      	ldr	r3, [pc, #176]	@ (8000bbc <SystemClock_Config+0xdc>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0c:	4a2b      	ldr	r2, [pc, #172]	@ (8000bbc <SystemClock_Config+0xdc>)
 8000b0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b14:	4b29      	ldr	r3, [pc, #164]	@ (8000bbc <SystemClock_Config+0xdc>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b20:	4b27      	ldr	r3, [pc, #156]	@ (8000bc0 <SystemClock_Config+0xe0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a26      	ldr	r2, [pc, #152]	@ (8000bc0 <SystemClock_Config+0xe0>)
 8000b26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	4b24      	ldr	r3, [pc, #144]	@ (8000bc0 <SystemClock_Config+0xe0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b38:	2309      	movs	r3, #9
 8000b3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b42:	2301      	movs	r3, #1
 8000b44:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b46:	2302      	movs	r3, #2
 8000b48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000b50:	2319      	movs	r3, #25
 8000b52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000b54:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000b58:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b5e:	2309      	movs	r3, #9
 8000b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b62:	f107 0320 	add.w	r3, r7, #32
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 f90c 	bl	8001d84 <HAL_RCC_OscConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b72:	f000 fab7 	bl	80010e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b76:	f001 f8b5 	bl	8001ce4 <HAL_PWREx_EnableOverDrive>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000b80:	f000 fab0 	bl	80010e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b84:	230f      	movs	r3, #15
 8000b86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b90:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	2106      	movs	r1, #6
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 fb92 	bl	80022cc <HAL_RCC_ClockConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000bae:	f000 fa99 	bl	80010e4 <Error_Handler>
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3750      	adds	r7, #80	@ 0x50
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40007000 	.word	0x40007000

08000bc4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b0a2      	sub	sp, #136	@ 0x88
 8000bc8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2284      	movs	r2, #132	@ 0x84
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f004 fcdb 	bl	800558c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8000bd6:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <PeriphCommonClock_Config+0x60>)
 8000bd8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000bda:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000bde:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000be0:	2305      	movs	r3, #5
 8000be2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000be8:	2303      	movs	r3, #3
 8000bea:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000bec:	2301      	movs	r3, #1
 8000bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000bf0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000bf4:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000bfa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000bfe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 fd76 	bl	80026fc <HAL_RCCEx_PeriphCLKConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000c16:	f000 fa65 	bl	80010e4 <Error_Handler>
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	3788      	adds	r7, #136	@ 0x88
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	00b00008 	.word	0x00b00008

08000c28 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */
  #ifdef MASTER_BOARD
	hspi2.Init.Mode = SPI_MODE_MASTER;
  #else
    hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <MX_SPI2_Init+0x70>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	605a      	str	r2, [r3, #4]
  #endif
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/

  hspi2.Instance = SPI2;
 8000c32:	4b19      	ldr	r3, [pc, #100]	@ (8000c98 <MX_SPI2_Init+0x70>)
 8000c34:	4a19      	ldr	r2, [pc, #100]	@ (8000c9c <MX_SPI2_Init+0x74>)
 8000c36:	601a      	str	r2, [r3, #0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c38:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <MX_SPI2_Init+0x70>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c3e:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <MX_SPI2_Init+0x70>)
 8000c40:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000c44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c46:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <MX_SPI2_Init+0x70>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <MX_SPI2_Init+0x70>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <MX_SPI2_Init+0x70>)
 8000c54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <MX_SPI2_Init+0x70>)
 8000c5c:	2238      	movs	r2, #56	@ 0x38
 8000c5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c60:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <MX_SPI2_Init+0x70>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c66:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <MX_SPI2_Init+0x70>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <MX_SPI2_Init+0x70>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000c72:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <MX_SPI2_Init+0x70>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c78:	4b07      	ldr	r3, [pc, #28]	@ (8000c98 <MX_SPI2_Init+0x70>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <MX_SPI2_Init+0x70>)
 8000c80:	2208      	movs	r2, #8
 8000c82:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c84:	4804      	ldr	r0, [pc, #16]	@ (8000c98 <MX_SPI2_Init+0x70>)
 8000c86:	f002 f929 	bl	8002edc <HAL_SPI_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_SPI2_Init+0x6c>
  {
    Error_Handler();
 8000c90:	f000 fa28 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000078 	.word	0x20000078
 8000c9c:	40003800 	.word	0x40003800

08000ca0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <MX_USART1_UART_Init+0x58>)
 8000ca6:	4a15      	ldr	r2, [pc, #84]	@ (8000cfc <MX_USART1_UART_Init+0x5c>)
 8000ca8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000caa:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <MX_USART1_UART_Init+0x58>)
 8000cac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <MX_USART1_UART_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <MX_USART1_UART_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <MX_USART1_UART_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <MX_USART1_UART_Init+0x58>)
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf8 <MX_USART1_UART_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <MX_USART1_UART_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <MX_USART1_UART_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <MX_USART1_UART_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <MX_USART1_UART_Init+0x58>)
 8000ce4:	f003 f948 	bl	8003f78 <HAL_UART_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000cee:	f000 f9f9 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200000dc 	.word	0x200000dc
 8000cfc:	40011000 	.word	0x40011000

08000d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b090      	sub	sp, #64	@ 0x40
 8000d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d16:	4bb1      	ldr	r3, [pc, #708]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4ab0      	ldr	r2, [pc, #704]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000d1c:	f043 0310 	orr.w	r3, r3, #16
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4bae      	ldr	r3, [pc, #696]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d2e:	4bab      	ldr	r3, [pc, #684]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	4aaa      	ldr	r2, [pc, #680]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3a:	4ba8      	ldr	r3, [pc, #672]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	4ba5      	ldr	r3, [pc, #660]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	4aa4      	ldr	r2, [pc, #656]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d52:	4ba2      	ldr	r3, [pc, #648]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	623b      	str	r3, [r7, #32]
 8000d5c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5e:	4b9f      	ldr	r3, [pc, #636]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a9e      	ldr	r2, [pc, #632]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b9c      	ldr	r3, [pc, #624]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	61fb      	str	r3, [r7, #28]
 8000d74:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d76:	4b99      	ldr	r3, [pc, #612]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a98      	ldr	r2, [pc, #608]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b96      	ldr	r3, [pc, #600]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	61bb      	str	r3, [r7, #24]
 8000d8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b93      	ldr	r3, [pc, #588]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a92      	ldr	r2, [pc, #584]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b90      	ldr	r3, [pc, #576]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000da6:	4b8d      	ldr	r3, [pc, #564]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a8c      	ldr	r2, [pc, #560]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000dac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b8a      	ldr	r3, [pc, #552]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000dbe:	4b87      	ldr	r3, [pc, #540]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4a86      	ldr	r2, [pc, #536]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dca:	4b84      	ldr	r3, [pc, #528]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000dd6:	4b81      	ldr	r3, [pc, #516]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a80      	ldr	r2, [pc, #512]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000ddc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b7e      	ldr	r3, [pc, #504]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dee:	4b7b      	ldr	r3, [pc, #492]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a7a      	ldr	r2, [pc, #488]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000df4:	f043 0320 	orr.w	r3, r3, #32
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b78      	ldr	r3, [pc, #480]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0320 	and.w	r3, r3, #32
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e06:	4b75      	ldr	r3, [pc, #468]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	4a74      	ldr	r2, [pc, #464]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000e0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e12:	4b72      	ldr	r3, [pc, #456]	@ (8000fdc <MX_GPIO_Init+0x2dc>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	2120      	movs	r1, #32
 8000e22:	486f      	ldr	r0, [pc, #444]	@ (8000fe0 <MX_GPIO_Init+0x2e0>)
 8000e24:	f000 ff1c 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	210c      	movs	r1, #12
 8000e2c:	486d      	ldr	r0, [pc, #436]	@ (8000fe4 <MX_GPIO_Init+0x2e4>)
 8000e2e:	f000 ff17 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2108      	movs	r1, #8
 8000e36:	486c      	ldr	r0, [pc, #432]	@ (8000fe8 <MX_GPIO_Init+0x2e8>)
 8000e38:	f000 ff12 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e42:	4868      	ldr	r0, [pc, #416]	@ (8000fe4 <MX_GPIO_Init+0x2e4>)
 8000e44:	f000 ff0c 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e4e:	4867      	ldr	r0, [pc, #412]	@ (8000fec <MX_GPIO_Init+0x2ec>)
 8000e50:	f000 ff06 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e5a:	4865      	ldr	r0, [pc, #404]	@ (8000ff0 <MX_GPIO_Init+0x2f0>)
 8000e5c:	f000 ff00 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	21c8      	movs	r1, #200	@ 0xc8
 8000e64:	4863      	ldr	r0, [pc, #396]	@ (8000ff4 <MX_GPIO_Init+0x2f4>)
 8000e66:	f000 fefb 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000e6a:	2308      	movs	r3, #8
 8000e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	485e      	ldr	r0, [pc, #376]	@ (8000ff8 <MX_GPIO_Init+0x2f8>)
 8000e7e:	f000 fd2b 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000e82:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e94:	230a      	movs	r3, #10
 8000e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4857      	ldr	r0, [pc, #348]	@ (8000ffc <MX_GPIO_Init+0x2fc>)
 8000ea0:	f000 fd1a 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000ea4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4851      	ldr	r0, [pc, #324]	@ (8001000 <MX_GPIO_Init+0x300>)
 8000eba:	f000 fd0d 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000ebe:	2340      	movs	r3, #64	@ 0x40
 8000ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ec2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4843      	ldr	r0, [pc, #268]	@ (8000fe0 <MX_GPIO_Init+0x2e0>)
 8000ed4:	f000 fd00 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ed8:	2320      	movs	r3, #32
 8000eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eec:	4619      	mov	r1, r3
 8000eee:	483c      	ldr	r0, [pc, #240]	@ (8000fe0 <MX_GPIO_Init+0x2e0>)
 8000ef0:	f000 fcf2 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000ef4:	f241 030c 	movw	r3, #4108	@ 0x100c
 8000ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4835      	ldr	r0, [pc, #212]	@ (8000fe4 <MX_GPIO_Init+0x2e4>)
 8000f0e:	f000 fce3 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000f12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f24:	4619      	mov	r1, r3
 8000f26:	4837      	ldr	r0, [pc, #220]	@ (8001004 <MX_GPIO_Init+0x304>)
 8000f28:	f000 fcd6 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000f2c:	2308      	movs	r3, #8
 8000f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f40:	4619      	mov	r1, r3
 8000f42:	4829      	ldr	r0, [pc, #164]	@ (8000fe8 <MX_GPIO_Init+0x2e8>)
 8000f44:	f000 fcc8 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f48:	2310      	movs	r3, #16
 8000f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4821      	ldr	r0, [pc, #132]	@ (8000fe0 <MX_GPIO_Init+0x2e0>)
 8000f5c:	f000 fcbc 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000f60:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f66:	2300      	movs	r3, #0
 8000f68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f72:	4619      	mov	r1, r3
 8000f74:	481d      	ldr	r0, [pc, #116]	@ (8000fec <MX_GPIO_Init+0x2ec>)
 8000f76:	f000 fcaf 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000f7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f90:	4619      	mov	r1, r3
 8000f92:	4816      	ldr	r0, [pc, #88]	@ (8000fec <MX_GPIO_Init+0x2ec>)
 8000f94:	f000 fca0 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000f98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  #ifdef MASTER_BOARD
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  #else
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f9e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000fa2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2102      	movs	r1, #2
 8000fac:	2017      	movs	r0, #23
 8000fae:	f000 fbd7 	bl	8001760 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fb2:	2017      	movs	r0, #23
 8000fb4:	f000 fbf0 	bl	8001798 <HAL_NVIC_EnableIRQ>
  #endif
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	480c      	ldr	r0, [pc, #48]	@ (8000ff0 <MX_GPIO_Init+0x2f0>)
 8000fc0:	f000 fc8a 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000fc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fca:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000fce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fd8:	4619      	mov	r1, r3
 8000fda:	e015      	b.n	8001008 <MX_GPIO_Init+0x308>
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020c00 	.word	0x40020c00
 8000fe4:	40022000 	.word	0x40022000
 8000fe8:	40022800 	.word	0x40022800
 8000fec:	40021c00 	.word	0x40021c00
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	40021800 	.word	0x40021800
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40020400 	.word	0x40020400
 8001000:	40022400 	.word	0x40022400
 8001004:	40020800 	.word	0x40020800
 8001008:	4828      	ldr	r0, [pc, #160]	@ (80010ac <MX_GPIO_Init+0x3ac>)
 800100a:	f000 fc65 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800100e:	2310      	movs	r3, #16
 8001010:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101a:	2303      	movs	r3, #3
 800101c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800101e:	230a      	movs	r3, #10
 8001020:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001026:	4619      	mov	r1, r3
 8001028:	4821      	ldr	r0, [pc, #132]	@ (80010b0 <MX_GPIO_Init+0x3b0>)
 800102a:	f000 fc55 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800102e:	23c8      	movs	r3, #200	@ 0xc8
 8001030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	2301      	movs	r3, #1
 8001034:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800103e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001042:	4619      	mov	r1, r3
 8001044:	481b      	ldr	r0, [pc, #108]	@ (80010b4 <MX_GPIO_Init+0x3b4>)
 8001046:	f000 fc47 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800104a:	2305      	movs	r3, #5
 800104c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800105a:	230a      	movs	r3, #10
 800105c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001062:	4619      	mov	r1, r3
 8001064:	4814      	ldr	r0, [pc, #80]	@ (80010b8 <MX_GPIO_Init+0x3b8>)
 8001066:	f000 fc37 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800106a:	2304      	movs	r3, #4
 800106c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106e:	2300      	movs	r3, #0
 8001070:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800107a:	4619      	mov	r1, r3
 800107c:	480d      	ldr	r0, [pc, #52]	@ (80010b4 <MX_GPIO_Init+0x3b4>)
 800107e:	f000 fc2b 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001082:	2328      	movs	r3, #40	@ 0x28
 8001084:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108e:	2303      	movs	r3, #3
 8001090:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001092:	230a      	movs	r3, #10
 8001094:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800109a:	4619      	mov	r1, r3
 800109c:	4807      	ldr	r0, [pc, #28]	@ (80010bc <MX_GPIO_Init+0x3bc>)
 800109e:	f000 fc1b 	bl	80018d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a2:	bf00      	nop
 80010a4:	3740      	adds	r7, #64	@ 0x40
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40022000 	.word	0x40022000
 80010b0:	40021c00 	.word	0x40021c00
 80010b4:	40021800 	.word	0x40021800
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020000 	.word	0x40020000

080010c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010d2:	f000 fa6d 	bl	80015b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40001000 	.word	0x40001000

080010e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e8:	b672      	cpsid	i
}
 80010ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <Error_Handler+0x8>

080010f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <HAL_MspInit+0x44>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001134 <HAL_MspInit+0x44>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001100:	6413      	str	r3, [r2, #64]	@ 0x40
 8001102:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <HAL_MspInit+0x44>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <HAL_MspInit+0x44>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001112:	4a08      	ldr	r2, [pc, #32]	@ (8001134 <HAL_MspInit+0x44>)
 8001114:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001118:	6453      	str	r3, [r2, #68]	@ 0x44
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HAL_MspInit+0x44>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800

08001138 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	@ 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a29      	ldr	r2, [pc, #164]	@ (80011fc <HAL_SPI_MspInit+0xc4>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d14c      	bne.n	80011f4 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800115a:	4b29      	ldr	r3, [pc, #164]	@ (8001200 <HAL_SPI_MspInit+0xc8>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	4a28      	ldr	r2, [pc, #160]	@ (8001200 <HAL_SPI_MspInit+0xc8>)
 8001160:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001164:	6413      	str	r3, [r2, #64]	@ 0x40
 8001166:	4b26      	ldr	r3, [pc, #152]	@ (8001200 <HAL_SPI_MspInit+0xc8>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001172:	4b23      	ldr	r3, [pc, #140]	@ (8001200 <HAL_SPI_MspInit+0xc8>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a22      	ldr	r2, [pc, #136]	@ (8001200 <HAL_SPI_MspInit+0xc8>)
 8001178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <HAL_SPI_MspInit+0xc8>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <HAL_SPI_MspInit+0xc8>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	4a1c      	ldr	r2, [pc, #112]	@ (8001200 <HAL_SPI_MspInit+0xc8>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6313      	str	r3, [r2, #48]	@ 0x30
 8001196:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <HAL_SPI_MspInit+0xc8>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80011a2:	2302      	movs	r3, #2
 80011a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011b2:	2305      	movs	r3, #5
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	4811      	ldr	r0, [pc, #68]	@ (8001204 <HAL_SPI_MspInit+0xcc>)
 80011be:	f000 fb8b 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80011c2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011d4:	2305      	movs	r3, #5
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	480a      	ldr	r0, [pc, #40]	@ (8001208 <HAL_SPI_MspInit+0xd0>)
 80011e0:	f000 fb7a 	bl	80018d8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2100      	movs	r1, #0
 80011e8:	2024      	movs	r0, #36	@ 0x24
 80011ea:	f000 fab9 	bl	8001760 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80011ee:	2024      	movs	r0, #36	@ 0x24
 80011f0:	f000 fad2 	bl	8001798 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80011f4:	bf00      	nop
 80011f6:	3728      	adds	r7, #40	@ 0x28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40003800 	.word	0x40003800
 8001200:	40023800 	.word	0x40023800
 8001204:	40022000 	.word	0x40022000
 8001208:	40020400 	.word	0x40020400

0800120c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0ac      	sub	sp, #176	@ 0xb0
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001224:	f107 0318 	add.w	r3, r7, #24
 8001228:	2284      	movs	r2, #132	@ 0x84
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f004 f9ad 	bl	800558c <memset>
  if(huart->Instance==USART1)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a36      	ldr	r2, [pc, #216]	@ (8001310 <HAL_UART_MspInit+0x104>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d164      	bne.n	8001306 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800123c:	2340      	movs	r3, #64	@ 0x40
 800123e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001240:	2300      	movs	r3, #0
 8001242:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	4618      	mov	r0, r3
 800124a:	f001 fa57 	bl	80026fc <HAL_RCCEx_PeriphCLKConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001254:	f7ff ff46 	bl	80010e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001258:	4b2e      	ldr	r3, [pc, #184]	@ (8001314 <HAL_UART_MspInit+0x108>)
 800125a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125c:	4a2d      	ldr	r2, [pc, #180]	@ (8001314 <HAL_UART_MspInit+0x108>)
 800125e:	f043 0310 	orr.w	r3, r3, #16
 8001262:	6453      	str	r3, [r2, #68]	@ 0x44
 8001264:	4b2b      	ldr	r3, [pc, #172]	@ (8001314 <HAL_UART_MspInit+0x108>)
 8001266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001268:	f003 0310 	and.w	r3, r3, #16
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	4b28      	ldr	r3, [pc, #160]	@ (8001314 <HAL_UART_MspInit+0x108>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001274:	4a27      	ldr	r2, [pc, #156]	@ (8001314 <HAL_UART_MspInit+0x108>)
 8001276:	f043 0302 	orr.w	r3, r3, #2
 800127a:	6313      	str	r3, [r2, #48]	@ 0x30
 800127c:	4b25      	ldr	r3, [pc, #148]	@ (8001314 <HAL_UART_MspInit+0x108>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b22      	ldr	r3, [pc, #136]	@ (8001314 <HAL_UART_MspInit+0x108>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128c:	4a21      	ldr	r2, [pc, #132]	@ (8001314 <HAL_UART_MspInit+0x108>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6313      	str	r3, [r2, #48]	@ 0x30
 8001294:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <HAL_UART_MspInit+0x108>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80012a0:	2380      	movs	r3, #128	@ 0x80
 80012a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012b8:	2307      	movs	r3, #7
 80012ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012c2:	4619      	mov	r1, r3
 80012c4:	4814      	ldr	r0, [pc, #80]	@ (8001318 <HAL_UART_MspInit+0x10c>)
 80012c6:	f000 fb07 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80012ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012e4:	2307      	movs	r3, #7
 80012e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012ee:	4619      	mov	r1, r3
 80012f0:	480a      	ldr	r0, [pc, #40]	@ (800131c <HAL_UART_MspInit+0x110>)
 80012f2:	f000 faf1 	bl	80018d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2025      	movs	r0, #37	@ 0x25
 80012fc:	f000 fa30 	bl	8001760 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001300:	2025      	movs	r0, #37	@ 0x25
 8001302:	f000 fa49 	bl	8001798 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001306:	bf00      	nop
 8001308:	37b0      	adds	r7, #176	@ 0xb0
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40011000 	.word	0x40011000
 8001314:	40023800 	.word	0x40023800
 8001318:	40020400 	.word	0x40020400
 800131c:	40020000 	.word	0x40020000

08001320 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08e      	sub	sp, #56	@ 0x38
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001330:	4b33      	ldr	r3, [pc, #204]	@ (8001400 <HAL_InitTick+0xe0>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001334:	4a32      	ldr	r2, [pc, #200]	@ (8001400 <HAL_InitTick+0xe0>)
 8001336:	f043 0310 	orr.w	r3, r3, #16
 800133a:	6413      	str	r3, [r2, #64]	@ 0x40
 800133c:	4b30      	ldr	r3, [pc, #192]	@ (8001400 <HAL_InitTick+0xe0>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001340:	f003 0310 	and.w	r3, r3, #16
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001348:	f107 0210 	add.w	r2, r7, #16
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f001 f9a0 	bl	8002698 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800135c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800135e:	2b00      	cmp	r3, #0
 8001360:	d103      	bne.n	800136a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001362:	f001 f971 	bl	8002648 <HAL_RCC_GetPCLK1Freq>
 8001366:	6378      	str	r0, [r7, #52]	@ 0x34
 8001368:	e004      	b.n	8001374 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800136a:	f001 f96d 	bl	8002648 <HAL_RCC_GetPCLK1Freq>
 800136e:	4603      	mov	r3, r0
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001376:	4a23      	ldr	r2, [pc, #140]	@ (8001404 <HAL_InitTick+0xe4>)
 8001378:	fba2 2303 	umull	r2, r3, r2, r3
 800137c:	0c9b      	lsrs	r3, r3, #18
 800137e:	3b01      	subs	r3, #1
 8001380:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001382:	4b21      	ldr	r3, [pc, #132]	@ (8001408 <HAL_InitTick+0xe8>)
 8001384:	4a21      	ldr	r2, [pc, #132]	@ (800140c <HAL_InitTick+0xec>)
 8001386:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001388:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <HAL_InitTick+0xe8>)
 800138a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800138e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001390:	4a1d      	ldr	r2, [pc, #116]	@ (8001408 <HAL_InitTick+0xe8>)
 8001392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001394:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001396:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <HAL_InitTick+0xe8>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139c:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <HAL_InitTick+0xe8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a2:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <HAL_InitTick+0xe8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80013a8:	4817      	ldr	r0, [pc, #92]	@ (8001408 <HAL_InitTick+0xe8>)
 80013aa:	f002 fae3 	bl	8003974 <HAL_TIM_Base_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80013b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d11b      	bne.n	80013f4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013bc:	4812      	ldr	r0, [pc, #72]	@ (8001408 <HAL_InitTick+0xe8>)
 80013be:	f002 fb3b 	bl	8003a38 <HAL_TIM_Base_Start_IT>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80013c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d111      	bne.n	80013f4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013d0:	2036      	movs	r0, #54	@ 0x36
 80013d2:	f000 f9e1 	bl	8001798 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d808      	bhi.n	80013ee <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80013dc:	2200      	movs	r2, #0
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	2036      	movs	r0, #54	@ 0x36
 80013e2:	f000 f9bd 	bl	8001760 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <HAL_InitTick+0xf0>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	e002      	b.n	80013f4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3738      	adds	r7, #56	@ 0x38
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	431bde83 	.word	0x431bde83
 8001408:	20000880 	.word	0x20000880
 800140c:	40001000 	.word	0x40001000
 8001410:	20000004 	.word	0x20000004

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <NMI_Handler+0x4>

0800141c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <MemManage_Handler+0x4>

0800142c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <UsageFault_Handler+0x4>

0800143c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001478:	4802      	ldr	r0, [pc, #8]	@ (8001484 <SPI2_IRQHandler+0x10>)
 800147a:	f001 fe89 	bl	8003190 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000078 	.word	0x20000078

08001488 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800148c:	4802      	ldr	r0, [pc, #8]	@ (8001498 <USART1_IRQHandler+0x10>)
 800148e:	f002 fe8f 	bl	80041b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200000dc 	.word	0x200000dc

0800149c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
HAL_TIM_Base_Stop_IT(&htim6);
 80014a0:	4803      	ldr	r0, [pc, #12]	@ (80014b0 <TIM6_DAC_IRQHandler+0x14>)
 80014a2:	f002 fb41 	bl	8003b28 <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014a6:	4802      	ldr	r0, [pc, #8]	@ (80014b0 <TIM6_DAC_IRQHandler+0x14>)
 80014a8:	f002 fb6d 	bl	8003b86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000880 	.word	0x20000880

080014b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014bc:	4a14      	ldr	r2, [pc, #80]	@ (8001510 <_sbrk+0x5c>)
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <_sbrk+0x60>)
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c8:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d0:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <_sbrk+0x64>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	@ (800151c <_sbrk+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d207      	bcs.n	80014f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e4:	f004 f85a 	bl	800559c <__errno>
 80014e8:	4603      	mov	r3, r0
 80014ea:	220c      	movs	r2, #12
 80014ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014f2:	e009      	b.n	8001508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f4:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fa:	4b07      	ldr	r3, [pc, #28]	@ (8001518 <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	4a05      	ldr	r2, [pc, #20]	@ (8001518 <_sbrk+0x64>)
 8001504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20050000 	.word	0x20050000
 8001514:	00000400 	.word	0x00000400
 8001518:	200008cc 	.word	0x200008cc
 800151c:	20000a20 	.word	0x20000a20

08001520 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <SystemInit+0x20>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800152a:	4a05      	ldr	r2, [pc, #20]	@ (8001540 <SystemInit+0x20>)
 800152c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001544:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800157c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001548:	f7ff ffea 	bl	8001520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800154c:	480c      	ldr	r0, [pc, #48]	@ (8001580 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800154e:	490d      	ldr	r1, [pc, #52]	@ (8001584 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001550:	4a0d      	ldr	r2, [pc, #52]	@ (8001588 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001562:	4a0a      	ldr	r2, [pc, #40]	@ (800158c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001564:	4c0a      	ldr	r4, [pc, #40]	@ (8001590 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001572:	f004 f819 	bl	80055a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001576:	f7ff fa1b 	bl	80009b0 <main>
  bx  lr    
 800157a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800157c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001584:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001588:	08005f7c 	.word	0x08005f7c
  ldr r2, =_sbss
 800158c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001590:	20000a1c 	.word	0x20000a1c

08001594 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <ADC_IRQHandler>

08001596 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800159a:	2003      	movs	r0, #3
 800159c:	f000 f8d5 	bl	800174a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a0:	200f      	movs	r0, #15
 80015a2:	f7ff febd 	bl	8001320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a6:	f7ff fda3 	bl	80010f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_IncTick+0x20>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_IncTick+0x24>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	4a04      	ldr	r2, [pc, #16]	@ (80015d4 <HAL_IncTick+0x24>)
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	20000008 	.word	0x20000008
 80015d4:	200008d0 	.word	0x200008d0

080015d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return uwTick;
 80015dc:	4b03      	ldr	r3, [pc, #12]	@ (80015ec <HAL_GetTick+0x14>)
 80015de:	681b      	ldr	r3, [r3, #0]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	200008d0 	.word	0x200008d0

080015f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001600:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <__NVIC_SetPriorityGrouping+0x40>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800160c:	4013      	ands	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001618:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 800161a:	4313      	orrs	r3, r2
 800161c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161e:	4a04      	ldr	r2, [pc, #16]	@ (8001630 <__NVIC_SetPriorityGrouping+0x40>)
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	60d3      	str	r3, [r2, #12]
}
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	05fa0000 	.word	0x05fa0000

08001638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800163c:	4b04      	ldr	r3, [pc, #16]	@ (8001650 <__NVIC_GetPriorityGrouping+0x18>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	f003 0307 	and.w	r3, r3, #7
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	db0b      	blt.n	800167e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	4907      	ldr	r1, [pc, #28]	@ (800168c <__NVIC_EnableIRQ+0x38>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	2001      	movs	r0, #1
 8001676:	fa00 f202 	lsl.w	r2, r0, r2
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0a      	blt.n	80016ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	490c      	ldr	r1, [pc, #48]	@ (80016dc <__NVIC_SetPriority+0x4c>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b8:	e00a      	b.n	80016d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4908      	ldr	r1, [pc, #32]	@ (80016e0 <__NVIC_SetPriority+0x50>)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	3b04      	subs	r3, #4
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	761a      	strb	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	@ 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f1c3 0307 	rsb	r3, r3, #7
 80016fe:	2b04      	cmp	r3, #4
 8001700:	bf28      	it	cs
 8001702:	2304      	movcs	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3304      	adds	r3, #4
 800170a:	2b06      	cmp	r3, #6
 800170c:	d902      	bls.n	8001714 <NVIC_EncodePriority+0x30>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3b03      	subs	r3, #3
 8001712:	e000      	b.n	8001716 <NVIC_EncodePriority+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43d9      	mvns	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	4313      	orrs	r3, r2
         );
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	@ 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ff4c 	bl	80015f0 <__NVIC_SetPriorityGrouping>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001772:	f7ff ff61 	bl	8001638 <__NVIC_GetPriorityGrouping>
 8001776:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	68b9      	ldr	r1, [r7, #8]
 800177c:	6978      	ldr	r0, [r7, #20]
 800177e:	f7ff ffb1 	bl	80016e4 <NVIC_EncodePriority>
 8001782:	4602      	mov	r2, r0
 8001784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff ff80 	bl	8001690 <__NVIC_SetPriority>
}
 8001790:	bf00      	nop
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ff54 	bl	8001654 <__NVIC_EnableIRQ>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017c2:	f7ff ff09 	bl	80015d8 <HAL_GetTick>
 80017c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d008      	beq.n	80017e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2280      	movs	r2, #128	@ 0x80
 80017d8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e052      	b.n	800188c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0216 	bic.w	r2, r2, #22
 80017f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	695a      	ldr	r2, [r3, #20]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001804:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	2b00      	cmp	r3, #0
 800180c:	d103      	bne.n	8001816 <HAL_DMA_Abort+0x62>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001812:	2b00      	cmp	r3, #0
 8001814:	d007      	beq.n	8001826 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0208 	bic.w	r2, r2, #8
 8001824:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 0201 	bic.w	r2, r2, #1
 8001834:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001836:	e013      	b.n	8001860 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001838:	f7ff fece 	bl	80015d8 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b05      	cmp	r3, #5
 8001844:	d90c      	bls.n	8001860 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2220      	movs	r2, #32
 800184a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2203      	movs	r2, #3
 8001850:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e015      	b.n	800188c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1e4      	bne.n	8001838 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001872:	223f      	movs	r2, #63	@ 0x3f
 8001874:	409a      	lsls	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d004      	beq.n	80018b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2280      	movs	r2, #128	@ 0x80
 80018ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00c      	b.n	80018cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2205      	movs	r2, #5
 80018b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0201 	bic.w	r2, r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	@ 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	e175      	b.n	8001be4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018f8:	2201      	movs	r2, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	429a      	cmp	r2, r3
 8001912:	f040 8164 	bne.w	8001bde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d005      	beq.n	800192e <HAL_GPIO_Init+0x56>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d130      	bne.n	8001990 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	2203      	movs	r2, #3
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001964:	2201      	movs	r2, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 0201 	and.w	r2, r3, #1
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b03      	cmp	r3, #3
 800199a:	d017      	beq.n	80019cc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d123      	bne.n	8001a20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	08da      	lsrs	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3208      	adds	r2, #8
 80019e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3208      	adds	r2, #8
 8001a1a:	69b9      	ldr	r1, [r7, #24]
 8001a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0203 	and.w	r2, r3, #3
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80be 	beq.w	8001bde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	4b66      	ldr	r3, [pc, #408]	@ (8001bfc <HAL_GPIO_Init+0x324>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a66:	4a65      	ldr	r2, [pc, #404]	@ (8001bfc <HAL_GPIO_Init+0x324>)
 8001a68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a6e:	4b63      	ldr	r3, [pc, #396]	@ (8001bfc <HAL_GPIO_Init+0x324>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a7a:	4a61      	ldr	r2, [pc, #388]	@ (8001c00 <HAL_GPIO_Init+0x328>)
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	3302      	adds	r3, #2
 8001a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	220f      	movs	r2, #15
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a58      	ldr	r2, [pc, #352]	@ (8001c04 <HAL_GPIO_Init+0x32c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d037      	beq.n	8001b16 <HAL_GPIO_Init+0x23e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a57      	ldr	r2, [pc, #348]	@ (8001c08 <HAL_GPIO_Init+0x330>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d031      	beq.n	8001b12 <HAL_GPIO_Init+0x23a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a56      	ldr	r2, [pc, #344]	@ (8001c0c <HAL_GPIO_Init+0x334>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d02b      	beq.n	8001b0e <HAL_GPIO_Init+0x236>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a55      	ldr	r2, [pc, #340]	@ (8001c10 <HAL_GPIO_Init+0x338>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d025      	beq.n	8001b0a <HAL_GPIO_Init+0x232>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a54      	ldr	r2, [pc, #336]	@ (8001c14 <HAL_GPIO_Init+0x33c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01f      	beq.n	8001b06 <HAL_GPIO_Init+0x22e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a53      	ldr	r2, [pc, #332]	@ (8001c18 <HAL_GPIO_Init+0x340>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d019      	beq.n	8001b02 <HAL_GPIO_Init+0x22a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a52      	ldr	r2, [pc, #328]	@ (8001c1c <HAL_GPIO_Init+0x344>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d013      	beq.n	8001afe <HAL_GPIO_Init+0x226>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a51      	ldr	r2, [pc, #324]	@ (8001c20 <HAL_GPIO_Init+0x348>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d00d      	beq.n	8001afa <HAL_GPIO_Init+0x222>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a50      	ldr	r2, [pc, #320]	@ (8001c24 <HAL_GPIO_Init+0x34c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d007      	beq.n	8001af6 <HAL_GPIO_Init+0x21e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4f      	ldr	r2, [pc, #316]	@ (8001c28 <HAL_GPIO_Init+0x350>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d101      	bne.n	8001af2 <HAL_GPIO_Init+0x21a>
 8001aee:	2309      	movs	r3, #9
 8001af0:	e012      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001af2:	230a      	movs	r3, #10
 8001af4:	e010      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001af6:	2308      	movs	r3, #8
 8001af8:	e00e      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001afa:	2307      	movs	r3, #7
 8001afc:	e00c      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001afe:	2306      	movs	r3, #6
 8001b00:	e00a      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b02:	2305      	movs	r3, #5
 8001b04:	e008      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b06:	2304      	movs	r3, #4
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e004      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e002      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b16:	2300      	movs	r3, #0
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	f002 0203 	and.w	r2, r2, #3
 8001b1e:	0092      	lsls	r2, r2, #2
 8001b20:	4093      	lsls	r3, r2
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b28:	4935      	ldr	r1, [pc, #212]	@ (8001c00 <HAL_GPIO_Init+0x328>)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	089b      	lsrs	r3, r3, #2
 8001b2e:	3302      	adds	r3, #2
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b36:	4b3d      	ldr	r3, [pc, #244]	@ (8001c2c <HAL_GPIO_Init+0x354>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b5a:	4a34      	ldr	r2, [pc, #208]	@ (8001c2c <HAL_GPIO_Init+0x354>)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b60:	4b32      	ldr	r3, [pc, #200]	@ (8001c2c <HAL_GPIO_Init+0x354>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b84:	4a29      	ldr	r2, [pc, #164]	@ (8001c2c <HAL_GPIO_Init+0x354>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b8a:	4b28      	ldr	r3, [pc, #160]	@ (8001c2c <HAL_GPIO_Init+0x354>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bae:	4a1f      	ldr	r2, [pc, #124]	@ (8001c2c <HAL_GPIO_Init+0x354>)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c2c <HAL_GPIO_Init+0x354>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bd8:	4a14      	ldr	r2, [pc, #80]	@ (8001c2c <HAL_GPIO_Init+0x354>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3301      	adds	r3, #1
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b0f      	cmp	r3, #15
 8001be8:	f67f ae86 	bls.w	80018f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	3724      	adds	r7, #36	@ 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40013800 	.word	0x40013800
 8001c04:	40020000 	.word	0x40020000
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40020c00 	.word	0x40020c00
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40021400 	.word	0x40021400
 8001c1c:	40021800 	.word	0x40021800
 8001c20:	40021c00 	.word	0x40021c00
 8001c24:	40022000 	.word	0x40022000
 8001c28:	40022400 	.word	0x40022400
 8001c2c:	40013c00 	.word	0x40013c00

08001c30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	887b      	ldrh	r3, [r7, #2]
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d002      	beq.n	8001c4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
 8001c4c:	e001      	b.n	8001c52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c70:	787b      	ldrb	r3, [r7, #1]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c76:	887a      	ldrh	r2, [r7, #2]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c7c:	e003      	b.n	8001c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c7e:	887b      	ldrh	r3, [r7, #2]
 8001c80:	041a      	lsls	r2, r3, #16
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	619a      	str	r2, [r3, #24]
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c9e:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ca0:	695a      	ldr	r2, [r3, #20]
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d006      	beq.n	8001cb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001caa:	4a05      	ldr	r2, [pc, #20]	@ (8001cc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fe5a 	bl	800096c <HAL_GPIO_EXTI_Callback>
  }
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40013c00 	.word	0x40013c00

08001cc4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cc8:	4b05      	ldr	r3, [pc, #20]	@ (8001ce0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a04      	ldr	r2, [pc, #16]	@ (8001ce0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40007000 	.word	0x40007000

08001ce4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	4b23      	ldr	r3, [pc, #140]	@ (8001d7c <HAL_PWREx_EnableOverDrive+0x98>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	4a22      	ldr	r2, [pc, #136]	@ (8001d7c <HAL_PWREx_EnableOverDrive+0x98>)
 8001cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cfa:	4b20      	ldr	r3, [pc, #128]	@ (8001d7c <HAL_PWREx_EnableOverDrive+0x98>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d06:	4b1e      	ldr	r3, [pc, #120]	@ (8001d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8001d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d10:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d12:	f7ff fc61 	bl	80015d8 <HAL_GetTick>
 8001d16:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d18:	e009      	b.n	8001d2e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d1a:	f7ff fc5d 	bl	80015d8 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d28:	d901      	bls.n	8001d2e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e022      	b.n	8001d74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d2e:	4b14      	ldr	r3, [pc, #80]	@ (8001d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d3a:	d1ee      	bne.n	8001d1a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d3c:	4b10      	ldr	r3, [pc, #64]	@ (8001d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a0f      	ldr	r2, [pc, #60]	@ (8001d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d46:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d48:	f7ff fc46 	bl	80015d8 <HAL_GetTick>
 8001d4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d4e:	e009      	b.n	8001d64 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d50:	f7ff fc42 	bl	80015d8 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d5e:	d901      	bls.n	8001d64 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e007      	b.n	8001d74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d64:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001d70:	d1ee      	bne.n	8001d50 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40007000 	.word	0x40007000

08001d84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e291      	b.n	80022be <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 8087 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001da8:	4b96      	ldr	r3, [pc, #600]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d00c      	beq.n	8001dce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001db4:	4b93      	ldr	r3, [pc, #588]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d112      	bne.n	8001de6 <HAL_RCC_OscConfig+0x62>
 8001dc0:	4b90      	ldr	r3, [pc, #576]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dcc:	d10b      	bne.n	8001de6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dce:	4b8d      	ldr	r3, [pc, #564]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d06c      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x130>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d168      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e26b      	b.n	80022be <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dee:	d106      	bne.n	8001dfe <HAL_RCC_OscConfig+0x7a>
 8001df0:	4b84      	ldr	r3, [pc, #528]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a83      	ldr	r2, [pc, #524]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001df6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	e02e      	b.n	8001e5c <HAL_RCC_OscConfig+0xd8>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10c      	bne.n	8001e20 <HAL_RCC_OscConfig+0x9c>
 8001e06:	4b7f      	ldr	r3, [pc, #508]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a7e      	ldr	r2, [pc, #504]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001e0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	4b7c      	ldr	r3, [pc, #496]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a7b      	ldr	r2, [pc, #492]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001e18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	e01d      	b.n	8001e5c <HAL_RCC_OscConfig+0xd8>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e28:	d10c      	bne.n	8001e44 <HAL_RCC_OscConfig+0xc0>
 8001e2a:	4b76      	ldr	r3, [pc, #472]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a75      	ldr	r2, [pc, #468]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001e30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b73      	ldr	r3, [pc, #460]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a72      	ldr	r2, [pc, #456]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	e00b      	b.n	8001e5c <HAL_RCC_OscConfig+0xd8>
 8001e44:	4b6f      	ldr	r3, [pc, #444]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a6e      	ldr	r2, [pc, #440]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b6c      	ldr	r3, [pc, #432]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a6b      	ldr	r2, [pc, #428]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001e56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d013      	beq.n	8001e8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7ff fbb8 	bl	80015d8 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7ff fbb4 	bl	80015d8 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	@ 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e21f      	b.n	80022be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	4b61      	ldr	r3, [pc, #388]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0xe8>
 8001e8a:	e014      	b.n	8001eb6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7ff fba4 	bl	80015d8 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e94:	f7ff fba0 	bl	80015d8 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e20b      	b.n	80022be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea6:	4b57      	ldr	r3, [pc, #348]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x110>
 8001eb2:	e000      	b.n	8001eb6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d069      	beq.n	8001f96 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ec2:	4b50      	ldr	r3, [pc, #320]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00b      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ece:	4b4d      	ldr	r3, [pc, #308]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d11c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x190>
 8001eda:	4b4a      	ldr	r3, [pc, #296]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d116      	bne.n	8001f14 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee6:	4b47      	ldr	r3, [pc, #284]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_RCC_OscConfig+0x17a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e1df      	b.n	80022be <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efe:	4b41      	ldr	r3, [pc, #260]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	493d      	ldr	r1, [pc, #244]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f12:	e040      	b.n	8001f96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d023      	beq.n	8001f64 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f1c:	4b39      	ldr	r3, [pc, #228]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a38      	ldr	r2, [pc, #224]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7ff fb56 	bl	80015d8 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f30:	f7ff fb52 	bl	80015d8 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e1bd      	b.n	80022be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f42:	4b30      	ldr	r3, [pc, #192]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4929      	ldr	r1, [pc, #164]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]
 8001f62:	e018      	b.n	8001f96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f64:	4b27      	ldr	r3, [pc, #156]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a26      	ldr	r2, [pc, #152]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001f6a:	f023 0301 	bic.w	r3, r3, #1
 8001f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7ff fb32 	bl	80015d8 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f78:	f7ff fb2e 	bl	80015d8 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e199      	b.n	80022be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d038      	beq.n	8002014 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d019      	beq.n	8001fde <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001faa:	4b16      	ldr	r3, [pc, #88]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001fac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fae:	4a15      	ldr	r2, [pc, #84]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb6:	f7ff fb0f 	bl	80015d8 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fbe:	f7ff fb0b 	bl	80015d8 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e176      	b.n	80022be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001fd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x23a>
 8001fdc:	e01a      	b.n	8002014 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fde:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fe2:	4a08      	ldr	r2, [pc, #32]	@ (8002004 <HAL_RCC_OscConfig+0x280>)
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fea:	f7ff faf5 	bl	80015d8 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff2:	f7ff faf1 	bl	80015d8 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d903      	bls.n	8002008 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e15c      	b.n	80022be <HAL_RCC_OscConfig+0x53a>
 8002004:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002008:	4b91      	ldr	r3, [pc, #580]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 800200a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1ee      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80a4 	beq.w	800216a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002022:	4b8b      	ldr	r3, [pc, #556]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10d      	bne.n	800204a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	4b88      	ldr	r3, [pc, #544]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	4a87      	ldr	r2, [pc, #540]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002038:	6413      	str	r3, [r2, #64]	@ 0x40
 800203a:	4b85      	ldr	r3, [pc, #532]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002046:	2301      	movs	r3, #1
 8002048:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800204a:	4b82      	ldr	r3, [pc, #520]	@ (8002254 <HAL_RCC_OscConfig+0x4d0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	d118      	bne.n	8002088 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002056:	4b7f      	ldr	r3, [pc, #508]	@ (8002254 <HAL_RCC_OscConfig+0x4d0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a7e      	ldr	r2, [pc, #504]	@ (8002254 <HAL_RCC_OscConfig+0x4d0>)
 800205c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002062:	f7ff fab9 	bl	80015d8 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206a:	f7ff fab5 	bl	80015d8 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b64      	cmp	r3, #100	@ 0x64
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e120      	b.n	80022be <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800207c:	4b75      	ldr	r3, [pc, #468]	@ (8002254 <HAL_RCC_OscConfig+0x4d0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d106      	bne.n	800209e <HAL_RCC_OscConfig+0x31a>
 8002090:	4b6f      	ldr	r3, [pc, #444]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002094:	4a6e      	ldr	r2, [pc, #440]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6713      	str	r3, [r2, #112]	@ 0x70
 800209c:	e02d      	b.n	80020fa <HAL_RCC_OscConfig+0x376>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x33c>
 80020a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 80020a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020aa:	4a69      	ldr	r2, [pc, #420]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80020b2:	4b67      	ldr	r3, [pc, #412]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 80020b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b6:	4a66      	ldr	r2, [pc, #408]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 80020b8:	f023 0304 	bic.w	r3, r3, #4
 80020bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80020be:	e01c      	b.n	80020fa <HAL_RCC_OscConfig+0x376>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d10c      	bne.n	80020e2 <HAL_RCC_OscConfig+0x35e>
 80020c8:	4b61      	ldr	r3, [pc, #388]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 80020ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020cc:	4a60      	ldr	r2, [pc, #384]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 80020ce:	f043 0304 	orr.w	r3, r3, #4
 80020d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d8:	4a5d      	ldr	r2, [pc, #372]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6713      	str	r3, [r2, #112]	@ 0x70
 80020e0:	e00b      	b.n	80020fa <HAL_RCC_OscConfig+0x376>
 80020e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 80020e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e6:	4a5a      	ldr	r2, [pc, #360]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ee:	4b58      	ldr	r3, [pc, #352]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f2:	4a57      	ldr	r2, [pc, #348]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 80020f4:	f023 0304 	bic.w	r3, r3, #4
 80020f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d015      	beq.n	800212e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002102:	f7ff fa69 	bl	80015d8 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002108:	e00a      	b.n	8002120 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210a:	f7ff fa65 	bl	80015d8 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002118:	4293      	cmp	r3, r2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e0ce      	b.n	80022be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002120:	4b4b      	ldr	r3, [pc, #300]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 8002122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0ee      	beq.n	800210a <HAL_RCC_OscConfig+0x386>
 800212c:	e014      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212e:	f7ff fa53 	bl	80015d8 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7ff fa4f 	bl	80015d8 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e0b8      	b.n	80022be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214c:	4b40      	ldr	r3, [pc, #256]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 800214e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1ee      	bne.n	8002136 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002158:	7dfb      	ldrb	r3, [r7, #23]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d105      	bne.n	800216a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215e:	4b3c      	ldr	r3, [pc, #240]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	4a3b      	ldr	r2, [pc, #236]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 8002164:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002168:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 80a4 	beq.w	80022bc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002174:	4b36      	ldr	r3, [pc, #216]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b08      	cmp	r3, #8
 800217e:	d06b      	beq.n	8002258 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d149      	bne.n	800221c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002188:	4b31      	ldr	r3, [pc, #196]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a30      	ldr	r2, [pc, #192]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 800218e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7ff fa20 	bl	80015d8 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219c:	f7ff fa1c 	bl	80015d8 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e087      	b.n	80022be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ae:	4b28      	ldr	r3, [pc, #160]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69da      	ldr	r2, [r3, #28]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c8:	019b      	lsls	r3, r3, #6
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d0:	085b      	lsrs	r3, r3, #1
 80021d2:	3b01      	subs	r3, #1
 80021d4:	041b      	lsls	r3, r3, #16
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021dc:	061b      	lsls	r3, r3, #24
 80021de:	4313      	orrs	r3, r2
 80021e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 80021e2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80021e6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e8:	4b19      	ldr	r3, [pc, #100]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a18      	ldr	r2, [pc, #96]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 80021ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7ff f9f0 	bl	80015d8 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fc:	f7ff f9ec 	bl	80015d8 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e057      	b.n	80022be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220e:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0x478>
 800221a:	e04f      	b.n	80022bc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221c:	4b0c      	ldr	r3, [pc, #48]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0b      	ldr	r2, [pc, #44]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 8002222:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7ff f9d6 	bl	80015d8 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002230:	f7ff f9d2 	bl	80015d8 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e03d      	b.n	80022be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002242:	4b03      	ldr	r3, [pc, #12]	@ (8002250 <HAL_RCC_OscConfig+0x4cc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x4ac>
 800224e:	e035      	b.n	80022bc <HAL_RCC_OscConfig+0x538>
 8002250:	40023800 	.word	0x40023800
 8002254:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002258:	4b1b      	ldr	r3, [pc, #108]	@ (80022c8 <HAL_RCC_OscConfig+0x544>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d028      	beq.n	80022b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002270:	429a      	cmp	r2, r3
 8002272:	d121      	bne.n	80022b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227e:	429a      	cmp	r2, r3
 8002280:	d11a      	bne.n	80022b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002288:	4013      	ands	r3, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800228e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002290:	4293      	cmp	r3, r2
 8002292:	d111      	bne.n	80022b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229e:	085b      	lsrs	r3, r3, #1
 80022a0:	3b01      	subs	r3, #1
 80022a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d107      	bne.n	80022b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e000      	b.n	80022be <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800

080022cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0d0      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d910      	bls.n	8002314 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b67      	ldr	r3, [pc, #412]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 020f 	bic.w	r2, r3, #15
 80022fa:	4965      	ldr	r1, [pc, #404]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b63      	ldr	r3, [pc, #396]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0b8      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d020      	beq.n	8002362 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800232c:	4b59      	ldr	r3, [pc, #356]	@ (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	4a58      	ldr	r2, [pc, #352]	@ (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 8002332:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002336:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002344:	4b53      	ldr	r3, [pc, #332]	@ (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4a52      	ldr	r2, [pc, #328]	@ (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 800234a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800234e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002350:	4b50      	ldr	r3, [pc, #320]	@ (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	494d      	ldr	r1, [pc, #308]	@ (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 800235e:	4313      	orrs	r3, r2
 8002360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d040      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d107      	bne.n	8002386 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	4b47      	ldr	r3, [pc, #284]	@ (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d115      	bne.n	80023ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e07f      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d107      	bne.n	800239e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238e:	4b41      	ldr	r3, [pc, #260]	@ (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e073      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239e:	4b3d      	ldr	r3, [pc, #244]	@ (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e06b      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ae:	4b39      	ldr	r3, [pc, #228]	@ (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f023 0203 	bic.w	r2, r3, #3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4936      	ldr	r1, [pc, #216]	@ (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023c0:	f7ff f90a 	bl	80015d8 <HAL_GetTick>
 80023c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c6:	e00a      	b.n	80023de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c8:	f7ff f906 	bl	80015d8 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e053      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023de:	4b2d      	ldr	r3, [pc, #180]	@ (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 020c 	and.w	r2, r3, #12
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d1eb      	bne.n	80023c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023f0:	4b27      	ldr	r3, [pc, #156]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d210      	bcs.n	8002420 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b24      	ldr	r3, [pc, #144]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 020f 	bic.w	r2, r3, #15
 8002406:	4922      	ldr	r1, [pc, #136]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b20      	ldr	r3, [pc, #128]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e032      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800242c:	4b19      	ldr	r3, [pc, #100]	@ (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4916      	ldr	r1, [pc, #88]	@ (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800244a:	4b12      	ldr	r3, [pc, #72]	@ (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	490e      	ldr	r1, [pc, #56]	@ (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 800245a:	4313      	orrs	r3, r2
 800245c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800245e:	f000 f821 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 8002462:	4602      	mov	r2, r0
 8002464:	4b0b      	ldr	r3, [pc, #44]	@ (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	490a      	ldr	r1, [pc, #40]	@ (8002498 <HAL_RCC_ClockConfig+0x1cc>)
 8002470:	5ccb      	ldrb	r3, [r1, r3]
 8002472:	fa22 f303 	lsr.w	r3, r2, r3
 8002476:	4a09      	ldr	r2, [pc, #36]	@ (800249c <HAL_RCC_ClockConfig+0x1d0>)
 8002478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800247a:	4b09      	ldr	r3, [pc, #36]	@ (80024a0 <HAL_RCC_ClockConfig+0x1d4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe ff4e 	bl	8001320 <HAL_InitTick>

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40023c00 	.word	0x40023c00
 8002494:	40023800 	.word	0x40023800
 8002498:	08005f20 	.word	0x08005f20
 800249c:	20000000 	.word	0x20000000
 80024a0:	20000004 	.word	0x20000004

080024a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024a8:	b090      	sub	sp, #64	@ 0x40
 80024aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80024b0:	2300      	movs	r3, #0
 80024b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024b4:	2300      	movs	r3, #0
 80024b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024bc:	4b59      	ldr	r3, [pc, #356]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x180>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d00d      	beq.n	80024e4 <HAL_RCC_GetSysClockFreq+0x40>
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	f200 80a1 	bhi.w	8002610 <HAL_RCC_GetSysClockFreq+0x16c>
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0x34>
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d003      	beq.n	80024de <HAL_RCC_GetSysClockFreq+0x3a>
 80024d6:	e09b      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024d8:	4b53      	ldr	r3, [pc, #332]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x184>)
 80024da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024dc:	e09b      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024de:	4b53      	ldr	r3, [pc, #332]	@ (800262c <HAL_RCC_GetSysClockFreq+0x188>)
 80024e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024e2:	e098      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024e4:	4b4f      	ldr	r3, [pc, #316]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x180>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80024ee:	4b4d      	ldr	r3, [pc, #308]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x180>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d028      	beq.n	800254c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x180>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	099b      	lsrs	r3, r3, #6
 8002500:	2200      	movs	r2, #0
 8002502:	623b      	str	r3, [r7, #32]
 8002504:	627a      	str	r2, [r7, #36]	@ 0x24
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800250c:	2100      	movs	r1, #0
 800250e:	4b47      	ldr	r3, [pc, #284]	@ (800262c <HAL_RCC_GetSysClockFreq+0x188>)
 8002510:	fb03 f201 	mul.w	r2, r3, r1
 8002514:	2300      	movs	r3, #0
 8002516:	fb00 f303 	mul.w	r3, r0, r3
 800251a:	4413      	add	r3, r2
 800251c:	4a43      	ldr	r2, [pc, #268]	@ (800262c <HAL_RCC_GetSysClockFreq+0x188>)
 800251e:	fba0 1202 	umull	r1, r2, r0, r2
 8002522:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002524:	460a      	mov	r2, r1
 8002526:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002528:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800252a:	4413      	add	r3, r2
 800252c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800252e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002530:	2200      	movs	r2, #0
 8002532:	61bb      	str	r3, [r7, #24]
 8002534:	61fa      	str	r2, [r7, #28]
 8002536:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800253a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800253e:	f7fd febf 	bl	80002c0 <__aeabi_uldivmod>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4613      	mov	r3, r2
 8002548:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800254a:	e053      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800254c:	4b35      	ldr	r3, [pc, #212]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x180>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	099b      	lsrs	r3, r3, #6
 8002552:	2200      	movs	r2, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	617a      	str	r2, [r7, #20]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800255e:	f04f 0b00 	mov.w	fp, #0
 8002562:	4652      	mov	r2, sl
 8002564:	465b      	mov	r3, fp
 8002566:	f04f 0000 	mov.w	r0, #0
 800256a:	f04f 0100 	mov.w	r1, #0
 800256e:	0159      	lsls	r1, r3, #5
 8002570:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002574:	0150      	lsls	r0, r2, #5
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	ebb2 080a 	subs.w	r8, r2, sl
 800257e:	eb63 090b 	sbc.w	r9, r3, fp
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800258e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002592:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002596:	ebb2 0408 	subs.w	r4, r2, r8
 800259a:	eb63 0509 	sbc.w	r5, r3, r9
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	00eb      	lsls	r3, r5, #3
 80025a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025ac:	00e2      	lsls	r2, r4, #3
 80025ae:	4614      	mov	r4, r2
 80025b0:	461d      	mov	r5, r3
 80025b2:	eb14 030a 	adds.w	r3, r4, sl
 80025b6:	603b      	str	r3, [r7, #0]
 80025b8:	eb45 030b 	adc.w	r3, r5, fp
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025ca:	4629      	mov	r1, r5
 80025cc:	028b      	lsls	r3, r1, #10
 80025ce:	4621      	mov	r1, r4
 80025d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025d4:	4621      	mov	r1, r4
 80025d6:	028a      	lsls	r2, r1, #10
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025de:	2200      	movs	r2, #0
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	60fa      	str	r2, [r7, #12]
 80025e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025e8:	f7fd fe6a 	bl	80002c0 <__aeabi_uldivmod>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4613      	mov	r3, r2
 80025f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80025f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x180>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	0c1b      	lsrs	r3, r3, #16
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	3301      	adds	r3, #1
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002604:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002608:	fbb2 f3f3 	udiv	r3, r2, r3
 800260c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800260e:	e002      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002610:	4b05      	ldr	r3, [pc, #20]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x184>)
 8002612:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002618:	4618      	mov	r0, r3
 800261a:	3740      	adds	r7, #64	@ 0x40
 800261c:	46bd      	mov	sp, r7
 800261e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800
 8002628:	00f42400 	.word	0x00f42400
 800262c:	017d7840 	.word	0x017d7840

08002630 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002634:	4b03      	ldr	r3, [pc, #12]	@ (8002644 <HAL_RCC_GetHCLKFreq+0x14>)
 8002636:	681b      	ldr	r3, [r3, #0]
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20000000 	.word	0x20000000

08002648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800264c:	f7ff fff0 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 8002650:	4602      	mov	r2, r0
 8002652:	4b05      	ldr	r3, [pc, #20]	@ (8002668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	0a9b      	lsrs	r3, r3, #10
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	4903      	ldr	r1, [pc, #12]	@ (800266c <HAL_RCC_GetPCLK1Freq+0x24>)
 800265e:	5ccb      	ldrb	r3, [r1, r3]
 8002660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40023800 	.word	0x40023800
 800266c:	08005f30 	.word	0x08005f30

08002670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002674:	f7ff ffdc 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 8002678:	4602      	mov	r2, r0
 800267a:	4b05      	ldr	r3, [pc, #20]	@ (8002690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	0b5b      	lsrs	r3, r3, #13
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	4903      	ldr	r1, [pc, #12]	@ (8002694 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002686:	5ccb      	ldrb	r3, [r1, r3]
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800268c:	4618      	mov	r0, r3
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40023800 	.word	0x40023800
 8002694:	08005f30 	.word	0x08005f30

08002698 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	220f      	movs	r2, #15
 80026a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026a8:	4b12      	ldr	r3, [pc, #72]	@ (80026f4 <HAL_RCC_GetClockConfig+0x5c>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0203 	and.w	r2, r3, #3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80026b4:	4b0f      	ldr	r3, [pc, #60]	@ (80026f4 <HAL_RCC_GetClockConfig+0x5c>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80026c0:	4b0c      	ldr	r3, [pc, #48]	@ (80026f4 <HAL_RCC_GetClockConfig+0x5c>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80026cc:	4b09      	ldr	r3, [pc, #36]	@ (80026f4 <HAL_RCC_GetClockConfig+0x5c>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	08db      	lsrs	r3, r3, #3
 80026d2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80026da:	4b07      	ldr	r3, [pc, #28]	@ (80026f8 <HAL_RCC_GetClockConfig+0x60>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 020f 	and.w	r2, r3, #15
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	601a      	str	r2, [r3, #0]
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40023c00 	.word	0x40023c00

080026fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d012      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002724:	4b69      	ldr	r3, [pc, #420]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	4a68      	ldr	r2, [pc, #416]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800272e:	6093      	str	r3, [r2, #8]
 8002730:	4b66      	ldr	r3, [pc, #408]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002738:	4964      	ldr	r1, [pc, #400]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273a:	4313      	orrs	r3, r2
 800273c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002746:	2301      	movs	r3, #1
 8002748:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d017      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002756:	4b5d      	ldr	r3, [pc, #372]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002758:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800275c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002764:	4959      	ldr	r1, [pc, #356]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002770:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002774:	d101      	bne.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002776:	2301      	movs	r3, #1
 8002778:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002782:	2301      	movs	r3, #1
 8002784:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d017      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002792:	4b4e      	ldr	r3, [pc, #312]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002794:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002798:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	494a      	ldr	r1, [pc, #296]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027b0:	d101      	bne.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80027b2:	2301      	movs	r3, #1
 80027b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80027be:	2301      	movs	r3, #1
 80027c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80027ce:	2301      	movs	r3, #1
 80027d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0320 	and.w	r3, r3, #32
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 808b 	beq.w	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027e0:	4b3a      	ldr	r3, [pc, #232]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e4:	4a39      	ldr	r2, [pc, #228]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ec:	4b37      	ldr	r3, [pc, #220]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027f8:	4b35      	ldr	r3, [pc, #212]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a34      	ldr	r2, [pc, #208]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002804:	f7fe fee8 	bl	80015d8 <HAL_GetTick>
 8002808:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280c:	f7fe fee4 	bl	80015d8 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	@ 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e357      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800281e:	4b2c      	ldr	r3, [pc, #176]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800282a:	4b28      	ldr	r3, [pc, #160]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002832:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d035      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	429a      	cmp	r2, r3
 8002846:	d02e      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002848:	4b20      	ldr	r3, [pc, #128]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002850:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002852:	4b1e      	ldr	r3, [pc, #120]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002856:	4a1d      	ldr	r2, [pc, #116]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800285c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800285e:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002862:	4a1a      	ldr	r2, [pc, #104]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002864:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002868:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800286a:	4a18      	ldr	r2, [pc, #96]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002870:	4b16      	ldr	r3, [pc, #88]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b01      	cmp	r3, #1
 800287a:	d114      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7fe feac 	bl	80015d8 <HAL_GetTick>
 8002880:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002882:	e00a      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002884:	f7fe fea8 	bl	80015d8 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e319      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289a:	4b0c      	ldr	r3, [pc, #48]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0ee      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80028b2:	d111      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80028b4:	4b05      	ldr	r3, [pc, #20]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028c0:	4b04      	ldr	r3, [pc, #16]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028c2:	400b      	ands	r3, r1
 80028c4:	4901      	ldr	r1, [pc, #4]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
 80028ca:	e00b      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40007000 	.word	0x40007000
 80028d4:	0ffffcff 	.word	0x0ffffcff
 80028d8:	4baa      	ldr	r3, [pc, #680]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	4aa9      	ldr	r2, [pc, #676]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028de:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80028e2:	6093      	str	r3, [r2, #8]
 80028e4:	4ba7      	ldr	r3, [pc, #668]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f0:	49a4      	ldr	r1, [pc, #656]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d010      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002902:	4ba0      	ldr	r3, [pc, #640]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002904:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002908:	4a9e      	ldr	r2, [pc, #632]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800290a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800290e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002912:	4b9c      	ldr	r3, [pc, #624]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002914:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291c:	4999      	ldr	r1, [pc, #612]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002930:	4b94      	ldr	r3, [pc, #592]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002936:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800293e:	4991      	ldr	r1, [pc, #580]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002952:	4b8c      	ldr	r3, [pc, #560]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002958:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002960:	4988      	ldr	r1, [pc, #544]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00a      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002974:	4b83      	ldr	r3, [pc, #524]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800297a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002982:	4980      	ldr	r1, [pc, #512]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002996:	4b7b      	ldr	r3, [pc, #492]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a4:	4977      	ldr	r1, [pc, #476]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029b8:	4b72      	ldr	r3, [pc, #456]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029be:	f023 0203 	bic.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	496f      	ldr	r1, [pc, #444]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029da:	4b6a      	ldr	r3, [pc, #424]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e0:	f023 020c 	bic.w	r2, r3, #12
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029e8:	4966      	ldr	r1, [pc, #408]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00a      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029fc:	4b61      	ldr	r3, [pc, #388]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a02:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0a:	495e      	ldr	r1, [pc, #376]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a1e:	4b59      	ldr	r3, [pc, #356]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a24:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a2c:	4955      	ldr	r1, [pc, #340]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a40:	4b50      	ldr	r3, [pc, #320]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a46:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a4e:	494d      	ldr	r1, [pc, #308]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00a      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a62:	4b48      	ldr	r3, [pc, #288]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a68:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a70:	4944      	ldr	r1, [pc, #272]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00a      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a84:	4b3f      	ldr	r3, [pc, #252]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a92:	493c      	ldr	r1, [pc, #240]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002aa6:	4b37      	ldr	r3, [pc, #220]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab4:	4933      	ldr	r1, [pc, #204]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00a      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ace:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ad6:	492b      	ldr	r1, [pc, #172]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d011      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002aea:	4b26      	ldr	r3, [pc, #152]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002af8:	4922      	ldr	r1, [pc, #136]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b08:	d101      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b2a:	4b16      	ldr	r3, [pc, #88]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b30:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b38:	4912      	ldr	r1, [pc, #72]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00b      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b52:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b5c:	4909      	ldr	r1, [pc, #36]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d006      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 80d9 	beq.w	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b78:	4b02      	ldr	r3, [pc, #8]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a01      	ldr	r2, [pc, #4]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b82:	e001      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002b84:	40023800 	.word	0x40023800
 8002b88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b8a:	f7fe fd25 	bl	80015d8 <HAL_GetTick>
 8002b8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b92:	f7fe fd21 	bl	80015d8 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b64      	cmp	r3, #100	@ 0x64
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e194      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ba4:	4b6c      	ldr	r3, [pc, #432]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1f0      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d021      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d11d      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bc4:	4b64      	ldr	r3, [pc, #400]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bca:	0c1b      	lsrs	r3, r3, #16
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bd2:	4b61      	ldr	r3, [pc, #388]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bd8:	0e1b      	lsrs	r3, r3, #24
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	019a      	lsls	r2, r3, #6
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	041b      	lsls	r3, r3, #16
 8002bea:	431a      	orrs	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	061b      	lsls	r3, r3, #24
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	071b      	lsls	r3, r3, #28
 8002bf8:	4957      	ldr	r1, [pc, #348]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d004      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c14:	d00a      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d02e      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c2a:	d129      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c2c:	4b4a      	ldr	r3, [pc, #296]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c32:	0c1b      	lsrs	r3, r3, #16
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c3a:	4b47      	ldr	r3, [pc, #284]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c40:	0f1b      	lsrs	r3, r3, #28
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	019a      	lsls	r2, r3, #6
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	041b      	lsls	r3, r3, #16
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	061b      	lsls	r3, r3, #24
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	071b      	lsls	r3, r3, #28
 8002c60:	493d      	ldr	r1, [pc, #244]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c68:	4b3b      	ldr	r3, [pc, #236]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c6e:	f023 021f 	bic.w	r2, r3, #31
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c76:	3b01      	subs	r3, #1
 8002c78:	4937      	ldr	r1, [pc, #220]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d01d      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c8c:	4b32      	ldr	r3, [pc, #200]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c92:	0e1b      	lsrs	r3, r3, #24
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ca0:	0f1b      	lsrs	r3, r3, #28
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	019a      	lsls	r2, r3, #6
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	041b      	lsls	r3, r3, #16
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	061b      	lsls	r3, r3, #24
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	071b      	lsls	r3, r3, #28
 8002cc0:	4925      	ldr	r1, [pc, #148]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d011      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	019a      	lsls	r2, r3, #6
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	041b      	lsls	r3, r3, #16
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	061b      	lsls	r3, r3, #24
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	071b      	lsls	r3, r3, #28
 8002cf0:	4919      	ldr	r1, [pc, #100]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cf8:	4b17      	ldr	r3, [pc, #92]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a16      	ldr	r2, [pc, #88]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cfe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d04:	f7fe fc68 	bl	80015d8 <HAL_GetTick>
 8002d08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d0c:	f7fe fc64 	bl	80015d8 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	@ 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e0d7      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	f040 80cd 	bne.w	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d32:	4b09      	ldr	r3, [pc, #36]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a08      	ldr	r2, [pc, #32]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d3e:	f7fe fc4b 	bl	80015d8 <HAL_GetTick>
 8002d42:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d44:	e00a      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d46:	f7fe fc47 	bl	80015d8 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b64      	cmp	r3, #100	@ 0x64
 8002d52:	d903      	bls.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e0ba      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002d58:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d5c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d68:	d0ed      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d009      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d02e      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d12a      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d92:	4b51      	ldr	r3, [pc, #324]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002da0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da6:	0f1b      	lsrs	r3, r3, #28
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	019a      	lsls	r2, r3, #6
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	041b      	lsls	r3, r3, #16
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	061b      	lsls	r3, r3, #24
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	071b      	lsls	r3, r3, #28
 8002dc6:	4944      	ldr	r1, [pc, #272]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002dce:	4b42      	ldr	r3, [pc, #264]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dd4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	021b      	lsls	r3, r3, #8
 8002de0:	493d      	ldr	r1, [pc, #244]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d022      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002df8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dfc:	d11d      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dfe:	4b36      	ldr	r3, [pc, #216]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e04:	0e1b      	lsrs	r3, r3, #24
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e0c:	4b32      	ldr	r3, [pc, #200]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e12:	0f1b      	lsrs	r3, r3, #28
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	019a      	lsls	r2, r3, #6
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	041b      	lsls	r3, r3, #16
 8002e26:	431a      	orrs	r2, r3
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	061b      	lsls	r3, r3, #24
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	071b      	lsls	r3, r3, #28
 8002e32:	4929      	ldr	r1, [pc, #164]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d028      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e46:	4b24      	ldr	r3, [pc, #144]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4c:	0e1b      	lsrs	r3, r3, #24
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e54:	4b20      	ldr	r3, [pc, #128]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e5a:	0c1b      	lsrs	r3, r3, #16
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	019a      	lsls	r2, r3, #6
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	041b      	lsls	r3, r3, #16
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	061b      	lsls	r3, r3, #24
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	071b      	lsls	r3, r3, #28
 8002e7a:	4917      	ldr	r1, [pc, #92]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e82:	4b15      	ldr	r3, [pc, #84]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e90:	4911      	ldr	r1, [pc, #68]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e98:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0e      	ldr	r2, [pc, #56]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ea2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ea4:	f7fe fb98 	bl	80015d8 <HAL_GetTick>
 8002ea8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002eac:	f7fe fb94 	bl	80015d8 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	@ 0x64
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e007      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ebe:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ec6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002eca:	d1ef      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3720      	adds	r7, #32
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800

08002edc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e09d      	b.n	800302a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d108      	bne.n	8002f08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002efe:	d009      	beq.n	8002f14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	61da      	str	r2, [r3, #28]
 8002f06:	e005      	b.n	8002f14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7fe f902 	bl	8001138 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f54:	d902      	bls.n	8002f5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	e002      	b.n	8002f62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002f6a:	d007      	beq.n	8002f7c <HAL_SPI_Init+0xa0>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f74:	d002      	beq.n	8002f7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fbe:	ea42 0103 	orr.w	r1, r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	0c1b      	lsrs	r3, r3, #16
 8002fd8:	f003 0204 	and.w	r2, r3, #4
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002ff8:	ea42 0103 	orr.w	r1, r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003018:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800304c:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003054:	7dbb      	ldrb	r3, [r7, #22]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d00d      	beq.n	8003076 <HAL_SPI_TransmitReceive_IT+0x42>
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003060:	d106      	bne.n	8003070 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d102      	bne.n	8003070 <HAL_SPI_TransmitReceive_IT+0x3c>
 800306a:	7dbb      	ldrb	r3, [r7, #22]
 800306c:	2b04      	cmp	r3, #4
 800306e:	d002      	beq.n	8003076 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8003070:	2302      	movs	r3, #2
 8003072:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003074:	e07d      	b.n	8003172 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_SPI_TransmitReceive_IT+0x54>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HAL_SPI_TransmitReceive_IT+0x54>
 8003082:	887b      	ldrh	r3, [r7, #2]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d102      	bne.n	800308e <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800308c:	e071      	b.n	8003172 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_SPI_TransmitReceive_IT+0x68>
 8003098:	2302      	movs	r3, #2
 800309a:	e06b      	b.n	8003174 <HAL_SPI_TransmitReceive_IT+0x140>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d003      	beq.n	80030b8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2205      	movs	r2, #5
 80030b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	887a      	ldrh	r2, [r7, #2]
 80030c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	887a      	ldrh	r2, [r7, #2]
 80030ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	887a      	ldrh	r2, [r7, #2]
 80030da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	887a      	ldrh	r2, [r7, #2]
 80030e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030ee:	d906      	bls.n	80030fe <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4a23      	ldr	r2, [pc, #140]	@ (8003180 <HAL_SPI_TransmitReceive_IT+0x14c>)
 80030f4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4a22      	ldr	r2, [pc, #136]	@ (8003184 <HAL_SPI_TransmitReceive_IT+0x150>)
 80030fa:	651a      	str	r2, [r3, #80]	@ 0x50
 80030fc:	e005      	b.n	800310a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4a21      	ldr	r2, [pc, #132]	@ (8003188 <HAL_SPI_TransmitReceive_IT+0x154>)
 8003102:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4a21      	ldr	r2, [pc, #132]	@ (800318c <HAL_SPI_TransmitReceive_IT+0x158>)
 8003108:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003112:	d802      	bhi.n	800311a <HAL_SPI_TransmitReceive_IT+0xe6>
 8003114:	887b      	ldrh	r3, [r7, #2]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d908      	bls.n	800312c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	e007      	b.n	800313c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800313a:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003146:	2b40      	cmp	r3, #64	@ 0x40
 8003148:	d007      	beq.n	800315a <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003158:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8003170:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8003172:	7dfb      	ldrb	r3, [r7, #23]
}
 8003174:	4618      	mov	r0, r3
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	0800351b 	.word	0x0800351b
 8003184:	08003581 	.word	0x08003581
 8003188:	080033cb 	.word	0x080033cb
 800318c:	08003489 	.word	0x08003489

08003190 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10e      	bne.n	80031d0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d009      	beq.n	80031d0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d004      	beq.n	80031d0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	4798      	blx	r3
    return;
 80031ce:	e0ce      	b.n	800336e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d009      	beq.n	80031ee <HAL_SPI_IRQHandler+0x5e>
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d004      	beq.n	80031ee <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
    return;
 80031ec:	e0bf      	b.n	800336e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	f003 0320 	and.w	r3, r3, #32
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10a      	bne.n	800320e <HAL_SPI_IRQHandler+0x7e>
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d105      	bne.n	800320e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80b0 	beq.w	800336e <HAL_SPI_IRQHandler+0x1de>
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 80aa 	beq.w	800336e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003220:	2b00      	cmp	r3, #0
 8003222:	d023      	beq.n	800326c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b03      	cmp	r3, #3
 800322e:	d011      	beq.n	8003254 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003234:	f043 0204 	orr.w	r2, r3, #4
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	e00b      	b.n	800326c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003254:	2300      	movs	r3, #0
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	693b      	ldr	r3, [r7, #16]
        return;
 800326a:	e080      	b.n	800336e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b00      	cmp	r3, #0
 8003274:	d014      	beq.n	80032a0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800327a:	f043 0201 	orr.w	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00c      	beq.n	80032c4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ae:	f043 0208 	orr.w	r2, r3, #8
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80032b6:	2300      	movs	r3, #0
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d04f      	beq.n	800336c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80032da:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d104      	bne.n	80032f8 <HAL_SPI_IRQHandler+0x168>
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d034      	beq.n	8003362 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0203 	bic.w	r2, r2, #3
 8003306:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330c:	2b00      	cmp	r3, #0
 800330e:	d011      	beq.n	8003334 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003314:	4a17      	ldr	r2, [pc, #92]	@ (8003374 <HAL_SPI_IRQHandler+0x1e4>)
 8003316:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe fab9 	bl	8001894 <HAL_DMA_Abort_IT>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d005      	beq.n	8003334 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800332c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003338:	2b00      	cmp	r3, #0
 800333a:	d016      	beq.n	800336a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003340:	4a0c      	ldr	r2, [pc, #48]	@ (8003374 <HAL_SPI_IRQHandler+0x1e4>)
 8003342:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003348:	4618      	mov	r0, r3
 800334a:	f7fe faa3 	bl	8001894 <HAL_DMA_Abort_IT>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003358:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003360:	e003      	b.n	800336a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f812 	bl	800338c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003368:	e000      	b.n	800336c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800336a:	bf00      	nop
    return;
 800336c:	bf00      	nop
  }
}
 800336e:	3720      	adds	r7, #32
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	080033a1 	.word	0x080033a1

08003378 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f7ff ffe5 	bl	800338c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d923      	bls.n	8003426 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e8:	b292      	uxth	r2, r2
 80033ea:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f0:	1c9a      	adds	r2, r3, #2
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3b02      	subs	r3, #2
 8003400:	b29a      	uxth	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800340e:	b29b      	uxth	r3, r3
 8003410:	2b01      	cmp	r3, #1
 8003412:	d11f      	bne.n	8003454 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003422:	605a      	str	r2, [r3, #4]
 8003424:	e016      	b.n	8003454 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f103 020c 	add.w	r2, r3, #12
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	7812      	ldrb	r2, [r2, #0]
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003448:	b29b      	uxth	r3, r3
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10f      	bne.n	8003480 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800346e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d102      	bne.n	8003480 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 fa38 	bl	80038f0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b01      	cmp	r3, #1
 8003498:	d912      	bls.n	80034c0 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349e:	881a      	ldrh	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034aa:	1c9a      	adds	r2, r3, #2
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b02      	subs	r3, #2
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034be:	e012      	b.n	80034e6 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	330c      	adds	r3, #12
 80034ca:	7812      	ldrb	r2, [r2, #0]
 80034cc:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d110      	bne.n	8003512 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034fe:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003506:	b29b      	uxth	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f9ef 	bl	80038f0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352c:	b292      	uxth	r2, r2
 800352e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003534:	1c9a      	adds	r2, r3, #2
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003552:	b29b      	uxth	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10f      	bne.n	8003578 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003566:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d102      	bne.n	8003578 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f9bc 	bl	80038f0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003578:	bf00      	nop
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358c:	881a      	ldrh	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003598:	1c9a      	adds	r2, r3, #2
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d110      	bne.n	80035d8 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035c4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d102      	bne.n	80035d8 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f98c 	bl	80038f0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	4613      	mov	r3, r2
 80035ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035f0:	f7fd fff2 	bl	80015d8 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	4413      	add	r3, r2
 80035fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003600:	f7fd ffea 	bl	80015d8 <HAL_GetTick>
 8003604:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003606:	4b39      	ldr	r3, [pc, #228]	@ (80036ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	015b      	lsls	r3, r3, #5
 800360c:	0d1b      	lsrs	r3, r3, #20
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	fb02 f303 	mul.w	r3, r2, r3
 8003614:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003616:	e054      	b.n	80036c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800361e:	d050      	beq.n	80036c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003620:	f7fd ffda 	bl	80015d8 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	429a      	cmp	r2, r3
 800362e:	d902      	bls.n	8003636 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d13d      	bne.n	80036b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003644:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800364e:	d111      	bne.n	8003674 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003658:	d004      	beq.n	8003664 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003662:	d107      	bne.n	8003674 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003672:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003678:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800367c:	d10f      	bne.n	800369e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800369c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e017      	b.n	80036e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	3b01      	subs	r3, #1
 80036c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4013      	ands	r3, r2
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	bf0c      	ite	eq
 80036d2:	2301      	moveq	r3, #1
 80036d4:	2300      	movne	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d19b      	bne.n	8003618 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3720      	adds	r7, #32
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000000 	.word	0x20000000

080036f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	@ 0x28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003702:	f7fd ff69 	bl	80015d8 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370a:	1a9b      	subs	r3, r3, r2
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	4413      	add	r3, r2
 8003710:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003712:	f7fd ff61 	bl	80015d8 <HAL_GetTick>
 8003716:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	330c      	adds	r3, #12
 800371e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003720:	4b3d      	ldr	r3, [pc, #244]	@ (8003818 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	00da      	lsls	r2, r3, #3
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	0d1b      	lsrs	r3, r3, #20
 8003730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003732:	fb02 f303 	mul.w	r3, r2, r3
 8003736:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003738:	e060      	b.n	80037fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003740:	d107      	bne.n	8003752 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d104      	bne.n	8003752 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003750:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003758:	d050      	beq.n	80037fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800375a:	f7fd ff3d 	bl	80015d8 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003766:	429a      	cmp	r2, r3
 8003768:	d902      	bls.n	8003770 <SPI_WaitFifoStateUntilTimeout+0x80>
 800376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376c:	2b00      	cmp	r3, #0
 800376e:	d13d      	bne.n	80037ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800377e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003788:	d111      	bne.n	80037ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003792:	d004      	beq.n	800379e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800379c:	d107      	bne.n	80037ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037b6:	d10f      	bne.n	80037d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e010      	b.n	800380e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	4013      	ands	r3, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	429a      	cmp	r2, r3
 800380a:	d196      	bne.n	800373a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3728      	adds	r7, #40	@ 0x28
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000000 	.word	0x20000000

0800381c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af02      	add	r7, sp, #8
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2200      	movs	r2, #0
 8003830:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f7ff ff5b 	bl	80036f0 <SPI_WaitFifoStateUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d007      	beq.n	8003850 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003844:	f043 0220 	orr.w	r2, r3, #32
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e046      	b.n	80038de <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003850:	4b25      	ldr	r3, [pc, #148]	@ (80038e8 <SPI_EndRxTxTransaction+0xcc>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a25      	ldr	r2, [pc, #148]	@ (80038ec <SPI_EndRxTxTransaction+0xd0>)
 8003856:	fba2 2303 	umull	r2, r3, r2, r3
 800385a:	0d5b      	lsrs	r3, r3, #21
 800385c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003860:	fb02 f303 	mul.w	r3, r2, r3
 8003864:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800386e:	d112      	bne.n	8003896 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2200      	movs	r2, #0
 8003878:	2180      	movs	r1, #128	@ 0x80
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f7ff feb0 	bl	80035e0 <SPI_WaitFlagStateUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d016      	beq.n	80038b4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e023      	b.n	80038de <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	3b01      	subs	r3, #1
 80038a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ac:	2b80      	cmp	r3, #128	@ 0x80
 80038ae:	d0f2      	beq.n	8003896 <SPI_EndRxTxTransaction+0x7a>
 80038b0:	e000      	b.n	80038b4 <SPI_EndRxTxTransaction+0x98>
        break;
 80038b2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f7ff ff15 	bl	80036f0 <SPI_WaitFifoStateUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d007      	beq.n	80038dc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d0:	f043 0220 	orr.w	r2, r3, #32
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e000      	b.n	80038de <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000000 	.word	0x20000000
 80038ec:	165e9f81 	.word	0x165e9f81

080038f0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038f8:	f7fd fe6e 	bl	80015d8 <HAL_GetTick>
 80038fc:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0220 	bic.w	r2, r2, #32
 800390c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	2164      	movs	r1, #100	@ 0x64
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff ff82 	bl	800381c <SPI_EndRxTxTransaction>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003922:	f043 0220 	orr.w	r2, r3, #32
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392e:	2b00      	cmp	r3, #0
 8003930:	d115      	bne.n	800395e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b04      	cmp	r3, #4
 800393c:	d107      	bne.n	800394e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff fd16 	bl	8003378 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800394c:	e00e      	b.n	800396c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fc ffd4 	bl	8000904 <HAL_SPI_TxRxCpltCallback>
}
 800395c:	e006      	b.n	800396c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff fd10 	bl	800338c <HAL_SPI_ErrorCallback>
}
 800396c:	bf00      	nop
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e049      	b.n	8003a1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f841 	bl	8003a22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	4619      	mov	r1, r3
 80039b2:	4610      	mov	r0, r2
 80039b4:	f000 fa16 	bl	8003de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
	...

08003a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d001      	beq.n	8003a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e054      	b.n	8003afa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a26      	ldr	r2, [pc, #152]	@ (8003b08 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d022      	beq.n	8003ab8 <HAL_TIM_Base_Start_IT+0x80>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a7a:	d01d      	beq.n	8003ab8 <HAL_TIM_Base_Start_IT+0x80>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a22      	ldr	r2, [pc, #136]	@ (8003b0c <HAL_TIM_Base_Start_IT+0xd4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d018      	beq.n	8003ab8 <HAL_TIM_Base_Start_IT+0x80>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a21      	ldr	r2, [pc, #132]	@ (8003b10 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d013      	beq.n	8003ab8 <HAL_TIM_Base_Start_IT+0x80>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a1f      	ldr	r2, [pc, #124]	@ (8003b14 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00e      	beq.n	8003ab8 <HAL_TIM_Base_Start_IT+0x80>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1e      	ldr	r2, [pc, #120]	@ (8003b18 <HAL_TIM_Base_Start_IT+0xe0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d009      	beq.n	8003ab8 <HAL_TIM_Base_Start_IT+0x80>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b1c <HAL_TIM_Base_Start_IT+0xe4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d004      	beq.n	8003ab8 <HAL_TIM_Base_Start_IT+0x80>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8003b20 <HAL_TIM_Base_Start_IT+0xe8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d115      	bne.n	8003ae4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	4b19      	ldr	r3, [pc, #100]	@ (8003b24 <HAL_TIM_Base_Start_IT+0xec>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b06      	cmp	r3, #6
 8003ac8:	d015      	beq.n	8003af6 <HAL_TIM_Base_Start_IT+0xbe>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ad0:	d011      	beq.n	8003af6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0201 	orr.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae2:	e008      	b.n	8003af6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	e000      	b.n	8003af8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40010000 	.word	0x40010000
 8003b0c:	40000400 	.word	0x40000400
 8003b10:	40000800 	.word	0x40000800
 8003b14:	40000c00 	.word	0x40000c00
 8003b18:	40010400 	.word	0x40010400
 8003b1c:	40014000 	.word	0x40014000
 8003b20:	40001800 	.word	0x40001800
 8003b24:	00010007 	.word	0x00010007

08003b28 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0201 	bic.w	r2, r2, #1
 8003b3e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6a1a      	ldr	r2, [r3, #32]
 8003b46:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10f      	bne.n	8003b70 <HAL_TIM_Base_Stop_IT+0x48>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6a1a      	ldr	r2, [r3, #32]
 8003b56:	f240 4344 	movw	r3, #1092	@ 0x444
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d107      	bne.n	8003b70 <HAL_TIM_Base_Stop_IT+0x48>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0201 	bic.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d020      	beq.n	8003bea <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d01b      	beq.n	8003bea <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f06f 0202 	mvn.w	r2, #2
 8003bba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f8e9 	bl	8003da8 <HAL_TIM_IC_CaptureCallback>
 8003bd6:	e005      	b.n	8003be4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f8db 	bl	8003d94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f8ec 	bl	8003dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d020      	beq.n	8003c36 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d01b      	beq.n	8003c36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f06f 0204 	mvn.w	r2, #4
 8003c06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f8c3 	bl	8003da8 <HAL_TIM_IC_CaptureCallback>
 8003c22:	e005      	b.n	8003c30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f8b5 	bl	8003d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f8c6 	bl	8003dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d020      	beq.n	8003c82 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d01b      	beq.n	8003c82 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f06f 0208 	mvn.w	r2, #8
 8003c52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2204      	movs	r2, #4
 8003c58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f89d 	bl	8003da8 <HAL_TIM_IC_CaptureCallback>
 8003c6e:	e005      	b.n	8003c7c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f88f 	bl	8003d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f8a0 	bl	8003dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f003 0310 	and.w	r3, r3, #16
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d020      	beq.n	8003cce <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f003 0310 	and.w	r3, r3, #16
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d01b      	beq.n	8003cce <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f06f 0210 	mvn.w	r2, #16
 8003c9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2208      	movs	r2, #8
 8003ca4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f877 	bl	8003da8 <HAL_TIM_IC_CaptureCallback>
 8003cba:	e005      	b.n	8003cc8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f869 	bl	8003d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f87a 	bl	8003dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00c      	beq.n	8003cf2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d007      	beq.n	8003cf2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f06f 0201 	mvn.w	r2, #1
 8003cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7fd f9e7 	bl	80010c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d104      	bne.n	8003d06 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00c      	beq.n	8003d20 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d007      	beq.n	8003d20 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f918 	bl	8003f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00c      	beq.n	8003d44 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d007      	beq.n	8003d44 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f910 	bl	8003f64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00c      	beq.n	8003d68 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d007      	beq.n	8003d68 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f834 	bl	8003dd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f003 0320 	and.w	r3, r3, #32
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00c      	beq.n	8003d8c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d007      	beq.n	8003d8c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f06f 0220 	mvn.w	r2, #32
 8003d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f8d8 	bl	8003f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d8c:	bf00      	nop
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a46      	ldr	r2, [pc, #280]	@ (8003f10 <TIM_Base_SetConfig+0x12c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d013      	beq.n	8003e24 <TIM_Base_SetConfig+0x40>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e02:	d00f      	beq.n	8003e24 <TIM_Base_SetConfig+0x40>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a43      	ldr	r2, [pc, #268]	@ (8003f14 <TIM_Base_SetConfig+0x130>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00b      	beq.n	8003e24 <TIM_Base_SetConfig+0x40>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a42      	ldr	r2, [pc, #264]	@ (8003f18 <TIM_Base_SetConfig+0x134>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d007      	beq.n	8003e24 <TIM_Base_SetConfig+0x40>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a41      	ldr	r2, [pc, #260]	@ (8003f1c <TIM_Base_SetConfig+0x138>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d003      	beq.n	8003e24 <TIM_Base_SetConfig+0x40>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a40      	ldr	r2, [pc, #256]	@ (8003f20 <TIM_Base_SetConfig+0x13c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d108      	bne.n	8003e36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a35      	ldr	r2, [pc, #212]	@ (8003f10 <TIM_Base_SetConfig+0x12c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d02b      	beq.n	8003e96 <TIM_Base_SetConfig+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e44:	d027      	beq.n	8003e96 <TIM_Base_SetConfig+0xb2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a32      	ldr	r2, [pc, #200]	@ (8003f14 <TIM_Base_SetConfig+0x130>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d023      	beq.n	8003e96 <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a31      	ldr	r2, [pc, #196]	@ (8003f18 <TIM_Base_SetConfig+0x134>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d01f      	beq.n	8003e96 <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a30      	ldr	r2, [pc, #192]	@ (8003f1c <TIM_Base_SetConfig+0x138>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d01b      	beq.n	8003e96 <TIM_Base_SetConfig+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a2f      	ldr	r2, [pc, #188]	@ (8003f20 <TIM_Base_SetConfig+0x13c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d017      	beq.n	8003e96 <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a2e      	ldr	r2, [pc, #184]	@ (8003f24 <TIM_Base_SetConfig+0x140>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d013      	beq.n	8003e96 <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a2d      	ldr	r2, [pc, #180]	@ (8003f28 <TIM_Base_SetConfig+0x144>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00f      	beq.n	8003e96 <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a2c      	ldr	r2, [pc, #176]	@ (8003f2c <TIM_Base_SetConfig+0x148>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00b      	beq.n	8003e96 <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a2b      	ldr	r2, [pc, #172]	@ (8003f30 <TIM_Base_SetConfig+0x14c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d007      	beq.n	8003e96 <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a2a      	ldr	r2, [pc, #168]	@ (8003f34 <TIM_Base_SetConfig+0x150>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d003      	beq.n	8003e96 <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a29      	ldr	r2, [pc, #164]	@ (8003f38 <TIM_Base_SetConfig+0x154>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d108      	bne.n	8003ea8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a10      	ldr	r2, [pc, #64]	@ (8003f10 <TIM_Base_SetConfig+0x12c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d003      	beq.n	8003edc <TIM_Base_SetConfig+0xf8>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a12      	ldr	r2, [pc, #72]	@ (8003f20 <TIM_Base_SetConfig+0x13c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d103      	bne.n	8003ee4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	691a      	ldr	r2, [r3, #16]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d105      	bne.n	8003f02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f023 0201 	bic.w	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	611a      	str	r2, [r3, #16]
  }
}
 8003f02:	bf00      	nop
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40010000 	.word	0x40010000
 8003f14:	40000400 	.word	0x40000400
 8003f18:	40000800 	.word	0x40000800
 8003f1c:	40000c00 	.word	0x40000c00
 8003f20:	40010400 	.word	0x40010400
 8003f24:	40014000 	.word	0x40014000
 8003f28:	40014400 	.word	0x40014400
 8003f2c:	40014800 	.word	0x40014800
 8003f30:	40001800 	.word	0x40001800
 8003f34:	40001c00 	.word	0x40001c00
 8003f38:	40002000 	.word	0x40002000

08003f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e040      	b.n	800400c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7fd f936 	bl	800120c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2224      	movs	r2, #36	@ 0x24
 8003fa4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0201 	bic.w	r2, r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fe4c 	bl	8004c5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 fbe5 	bl	8004794 <UART_SetConfig>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e01b      	b.n	800400c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fe2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ff2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fecb 	bl	8004da0 <UART_CheckIdleState>
 800400a:	4603      	mov	r3, r0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08a      	sub	sp, #40	@ 0x28
 8004018:	af02      	add	r7, sp, #8
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	4613      	mov	r3, r2
 8004022:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004028:	2b20      	cmp	r3, #32
 800402a:	d177      	bne.n	800411c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <HAL_UART_Transmit+0x24>
 8004032:	88fb      	ldrh	r3, [r7, #6]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e070      	b.n	800411e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2221      	movs	r2, #33	@ 0x21
 8004048:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800404a:	f7fd fac5 	bl	80015d8 <HAL_GetTick>
 800404e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	88fa      	ldrh	r2, [r7, #6]
 8004054:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	88fa      	ldrh	r2, [r7, #6]
 800405c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004068:	d108      	bne.n	800407c <HAL_UART_Transmit+0x68>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d104      	bne.n	800407c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004072:	2300      	movs	r3, #0
 8004074:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	61bb      	str	r3, [r7, #24]
 800407a:	e003      	b.n	8004084 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004080:	2300      	movs	r3, #0
 8004082:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004084:	e02f      	b.n	80040e6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2200      	movs	r2, #0
 800408e:	2180      	movs	r1, #128	@ 0x80
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 fedc 	bl	8004e4e <UART_WaitOnFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d004      	beq.n	80040a6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2220      	movs	r2, #32
 80040a0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e03b      	b.n	800411e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10b      	bne.n	80040c4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	3302      	adds	r3, #2
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	e007      	b.n	80040d4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	781a      	ldrb	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	3301      	adds	r3, #1
 80040d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1c9      	bne.n	8004086 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2200      	movs	r2, #0
 80040fa:	2140      	movs	r1, #64	@ 0x40
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 fea6 	bl	8004e4e <UART_WaitOnFlagUntilTimeout>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d004      	beq.n	8004112 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e005      	b.n	800411e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	e000      	b.n	800411e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800411c:	2302      	movs	r3, #2
  }
}
 800411e:	4618      	mov	r0, r3
 8004120:	3720      	adds	r7, #32
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b08a      	sub	sp, #40	@ 0x28
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	4613      	mov	r3, r2
 8004132:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800413a:	2b20      	cmp	r3, #32
 800413c:	d132      	bne.n	80041a4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <HAL_UART_Receive_IT+0x24>
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e02b      	b.n	80041a6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d018      	beq.n	8004194 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	e853 3f00 	ldrex	r3, [r3]
 800416e:	613b      	str	r3, [r7, #16]
   return(result);
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004176:	627b      	str	r3, [r7, #36]	@ 0x24
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004180:	623b      	str	r3, [r7, #32]
 8004182:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004184:	69f9      	ldr	r1, [r7, #28]
 8004186:	6a3a      	ldr	r2, [r7, #32]
 8004188:	e841 2300 	strex	r3, r2, [r1]
 800418c:	61bb      	str	r3, [r7, #24]
   return(result);
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1e6      	bne.n	8004162 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004194:	88fb      	ldrh	r3, [r7, #6]
 8004196:	461a      	mov	r2, r3
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 fec4 	bl	8004f28 <UART_Start_Receive_IT>
 80041a0:	4603      	mov	r3, r0
 80041a2:	e000      	b.n	80041a6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80041a4:	2302      	movs	r3, #2
  }
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3728      	adds	r7, #40	@ 0x28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b0ba      	sub	sp, #232	@ 0xe8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80041da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80041de:	4013      	ands	r3, r2
 80041e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80041e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d115      	bne.n	8004218 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00f      	beq.n	8004218 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b00      	cmp	r3, #0
 8004202:	d009      	beq.n	8004218 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8297 	beq.w	800473c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	4798      	blx	r3
      }
      return;
 8004216:	e291      	b.n	800473c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004218:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 8117 	beq.w	8004450 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d106      	bne.n	800423c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800422e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004232:	4b85      	ldr	r3, [pc, #532]	@ (8004448 <HAL_UART_IRQHandler+0x298>)
 8004234:	4013      	ands	r3, r2
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 810a 	beq.w	8004450 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800423c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d011      	beq.n	800426c <HAL_UART_IRQHandler+0xbc>
 8004248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800424c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00b      	beq.n	800426c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2201      	movs	r2, #1
 800425a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004262:	f043 0201 	orr.w	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800426c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d011      	beq.n	800429c <HAL_UART_IRQHandler+0xec>
 8004278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00b      	beq.n	800429c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2202      	movs	r2, #2
 800428a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004292:	f043 0204 	orr.w	r2, r3, #4
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800429c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d011      	beq.n	80042cc <HAL_UART_IRQHandler+0x11c>
 80042a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00b      	beq.n	80042cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2204      	movs	r2, #4
 80042ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042c2:	f043 0202 	orr.w	r2, r3, #2
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d017      	beq.n	8004308 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d105      	bne.n	80042f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80042e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00b      	beq.n	8004308 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2208      	movs	r2, #8
 80042f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042fe:	f043 0208 	orr.w	r2, r3, #8
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800430c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004310:	2b00      	cmp	r3, #0
 8004312:	d012      	beq.n	800433a <HAL_UART_IRQHandler+0x18a>
 8004314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004318:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00c      	beq.n	800433a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004328:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004330:	f043 0220 	orr.w	r2, r3, #32
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 81fd 	beq.w	8004740 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00d      	beq.n	800436e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	d007      	beq.n	800436e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004374:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004382:	2b40      	cmp	r3, #64	@ 0x40
 8004384:	d005      	beq.n	8004392 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004386:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800438a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800438e:	2b00      	cmp	r3, #0
 8004390:	d04f      	beq.n	8004432 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fe8e 	bl	80050b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a2:	2b40      	cmp	r3, #64	@ 0x40
 80043a4:	d141      	bne.n	800442a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3308      	adds	r3, #8
 80043ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043b4:	e853 3f00 	ldrex	r3, [r3]
 80043b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80043bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3308      	adds	r3, #8
 80043ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80043d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80043de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80043e2:	e841 2300 	strex	r3, r2, [r1]
 80043e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80043ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1d9      	bne.n	80043a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d013      	beq.n	8004422 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043fe:	4a13      	ldr	r2, [pc, #76]	@ (800444c <HAL_UART_IRQHandler+0x29c>)
 8004400:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004406:	4618      	mov	r0, r3
 8004408:	f7fd fa44 	bl	8001894 <HAL_DMA_Abort_IT>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d017      	beq.n	8004442 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800441c:	4610      	mov	r0, r2
 800441e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004420:	e00f      	b.n	8004442 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f9a0 	bl	8004768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004428:	e00b      	b.n	8004442 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f99c 	bl	8004768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004430:	e007      	b.n	8004442 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f998 	bl	8004768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004440:	e17e      	b.n	8004740 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004442:	bf00      	nop
    return;
 8004444:	e17c      	b.n	8004740 <HAL_UART_IRQHandler+0x590>
 8004446:	bf00      	nop
 8004448:	04000120 	.word	0x04000120
 800444c:	0800517d 	.word	0x0800517d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004454:	2b01      	cmp	r3, #1
 8004456:	f040 814c 	bne.w	80046f2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800445a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 8145 	beq.w	80046f2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 813e 	beq.w	80046f2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2210      	movs	r2, #16
 800447c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004488:	2b40      	cmp	r3, #64	@ 0x40
 800448a:	f040 80b6 	bne.w	80045fa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800449a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 8150 	beq.w	8004744 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80044aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044ae:	429a      	cmp	r2, r3
 80044b0:	f080 8148 	bcs.w	8004744 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044c8:	f000 8086 	beq.w	80045d8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044d8:	e853 3f00 	ldrex	r3, [r3]
 80044dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80044e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80044f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80044fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004502:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800450e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1da      	bne.n	80044cc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3308      	adds	r3, #8
 800451c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004520:	e853 3f00 	ldrex	r3, [r3]
 8004524:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004526:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004528:	f023 0301 	bic.w	r3, r3, #1
 800452c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3308      	adds	r3, #8
 8004536:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800453a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800453e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004540:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004542:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800454c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e1      	bne.n	8004516 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3308      	adds	r3, #8
 8004558:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004562:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004564:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004568:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3308      	adds	r3, #8
 8004572:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004576:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004578:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800457c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004584:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1e3      	bne.n	8004552 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045a8:	f023 0310 	bic.w	r3, r3, #16
 80045ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	461a      	mov	r2, r3
 80045b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045c2:	e841 2300 	strex	r3, r2, [r1]
 80045c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1e4      	bne.n	8004598 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fd f8ee 	bl	80017b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	4619      	mov	r1, r3
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f8c2 	bl	800477c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045f8:	e0a4      	b.n	8004744 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004606:	b29b      	uxth	r3, r3
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 8096 	beq.w	8004748 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800461c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 8091 	beq.w	8004748 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004636:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800463a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004648:	647b      	str	r3, [r7, #68]	@ 0x44
 800464a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800464e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e4      	bne.n	8004626 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3308      	adds	r3, #8
 8004662:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004666:	e853 3f00 	ldrex	r3, [r3]
 800466a:	623b      	str	r3, [r7, #32]
   return(result);
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	f023 0301 	bic.w	r3, r3, #1
 8004672:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3308      	adds	r3, #8
 800467c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004680:	633a      	str	r2, [r7, #48]	@ 0x30
 8004682:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004688:	e841 2300 	strex	r3, r2, [r1]
 800468c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800468e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e3      	bne.n	800465c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f023 0310 	bic.w	r3, r3, #16
 80046bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	461a      	mov	r2, r3
 80046c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046ca:	61fb      	str	r3, [r7, #28]
 80046cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	69b9      	ldr	r1, [r7, #24]
 80046d0:	69fa      	ldr	r2, [r7, #28]
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	617b      	str	r3, [r7, #20]
   return(result);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e4      	bne.n	80046a8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2202      	movs	r2, #2
 80046e2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046e8:	4619      	mov	r1, r3
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f846 	bl	800477c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046f0:	e02a      	b.n	8004748 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80046f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00e      	beq.n	800471c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80046fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004706:	2b00      	cmp	r3, #0
 8004708:	d008      	beq.n	800471c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800470e:	2b00      	cmp	r3, #0
 8004710:	d01c      	beq.n	800474c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	4798      	blx	r3
    }
    return;
 800471a:	e017      	b.n	800474c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800471c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004724:	2b00      	cmp	r3, #0
 8004726:	d012      	beq.n	800474e <HAL_UART_IRQHandler+0x59e>
 8004728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800472c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00c      	beq.n	800474e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fd37 	bl	80051a8 <UART_EndTransmit_IT>
    return;
 800473a:	e008      	b.n	800474e <HAL_UART_IRQHandler+0x59e>
      return;
 800473c:	bf00      	nop
 800473e:	e006      	b.n	800474e <HAL_UART_IRQHandler+0x59e>
    return;
 8004740:	bf00      	nop
 8004742:	e004      	b.n	800474e <HAL_UART_IRQHandler+0x59e>
      return;
 8004744:	bf00      	nop
 8004746:	e002      	b.n	800474e <HAL_UART_IRQHandler+0x59e>
      return;
 8004748:	bf00      	nop
 800474a:	e000      	b.n	800474e <HAL_UART_IRQHandler+0x59e>
    return;
 800474c:	bf00      	nop
  }

}
 800474e:	37e8      	adds	r7, #232	@ 0xe8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	4ba6      	ldr	r3, [pc, #664]	@ (8004a58 <UART_SetConfig+0x2c4>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6812      	ldr	r2, [r2, #0]
 80047c6:	6979      	ldr	r1, [r7, #20]
 80047c8:	430b      	orrs	r3, r1
 80047ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	430a      	orrs	r2, r1
 8004804:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a94      	ldr	r2, [pc, #592]	@ (8004a5c <UART_SetConfig+0x2c8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d120      	bne.n	8004852 <UART_SetConfig+0xbe>
 8004810:	4b93      	ldr	r3, [pc, #588]	@ (8004a60 <UART_SetConfig+0x2cc>)
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b03      	cmp	r3, #3
 800481c:	d816      	bhi.n	800484c <UART_SetConfig+0xb8>
 800481e:	a201      	add	r2, pc, #4	@ (adr r2, 8004824 <UART_SetConfig+0x90>)
 8004820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004824:	08004835 	.word	0x08004835
 8004828:	08004841 	.word	0x08004841
 800482c:	0800483b 	.word	0x0800483b
 8004830:	08004847 	.word	0x08004847
 8004834:	2301      	movs	r3, #1
 8004836:	77fb      	strb	r3, [r7, #31]
 8004838:	e150      	b.n	8004adc <UART_SetConfig+0x348>
 800483a:	2302      	movs	r3, #2
 800483c:	77fb      	strb	r3, [r7, #31]
 800483e:	e14d      	b.n	8004adc <UART_SetConfig+0x348>
 8004840:	2304      	movs	r3, #4
 8004842:	77fb      	strb	r3, [r7, #31]
 8004844:	e14a      	b.n	8004adc <UART_SetConfig+0x348>
 8004846:	2308      	movs	r3, #8
 8004848:	77fb      	strb	r3, [r7, #31]
 800484a:	e147      	b.n	8004adc <UART_SetConfig+0x348>
 800484c:	2310      	movs	r3, #16
 800484e:	77fb      	strb	r3, [r7, #31]
 8004850:	e144      	b.n	8004adc <UART_SetConfig+0x348>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a83      	ldr	r2, [pc, #524]	@ (8004a64 <UART_SetConfig+0x2d0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d132      	bne.n	80048c2 <UART_SetConfig+0x12e>
 800485c:	4b80      	ldr	r3, [pc, #512]	@ (8004a60 <UART_SetConfig+0x2cc>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004862:	f003 030c 	and.w	r3, r3, #12
 8004866:	2b0c      	cmp	r3, #12
 8004868:	d828      	bhi.n	80048bc <UART_SetConfig+0x128>
 800486a:	a201      	add	r2, pc, #4	@ (adr r2, 8004870 <UART_SetConfig+0xdc>)
 800486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004870:	080048a5 	.word	0x080048a5
 8004874:	080048bd 	.word	0x080048bd
 8004878:	080048bd 	.word	0x080048bd
 800487c:	080048bd 	.word	0x080048bd
 8004880:	080048b1 	.word	0x080048b1
 8004884:	080048bd 	.word	0x080048bd
 8004888:	080048bd 	.word	0x080048bd
 800488c:	080048bd 	.word	0x080048bd
 8004890:	080048ab 	.word	0x080048ab
 8004894:	080048bd 	.word	0x080048bd
 8004898:	080048bd 	.word	0x080048bd
 800489c:	080048bd 	.word	0x080048bd
 80048a0:	080048b7 	.word	0x080048b7
 80048a4:	2300      	movs	r3, #0
 80048a6:	77fb      	strb	r3, [r7, #31]
 80048a8:	e118      	b.n	8004adc <UART_SetConfig+0x348>
 80048aa:	2302      	movs	r3, #2
 80048ac:	77fb      	strb	r3, [r7, #31]
 80048ae:	e115      	b.n	8004adc <UART_SetConfig+0x348>
 80048b0:	2304      	movs	r3, #4
 80048b2:	77fb      	strb	r3, [r7, #31]
 80048b4:	e112      	b.n	8004adc <UART_SetConfig+0x348>
 80048b6:	2308      	movs	r3, #8
 80048b8:	77fb      	strb	r3, [r7, #31]
 80048ba:	e10f      	b.n	8004adc <UART_SetConfig+0x348>
 80048bc:	2310      	movs	r3, #16
 80048be:	77fb      	strb	r3, [r7, #31]
 80048c0:	e10c      	b.n	8004adc <UART_SetConfig+0x348>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a68      	ldr	r2, [pc, #416]	@ (8004a68 <UART_SetConfig+0x2d4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d120      	bne.n	800490e <UART_SetConfig+0x17a>
 80048cc:	4b64      	ldr	r3, [pc, #400]	@ (8004a60 <UART_SetConfig+0x2cc>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80048d6:	2b30      	cmp	r3, #48	@ 0x30
 80048d8:	d013      	beq.n	8004902 <UART_SetConfig+0x16e>
 80048da:	2b30      	cmp	r3, #48	@ 0x30
 80048dc:	d814      	bhi.n	8004908 <UART_SetConfig+0x174>
 80048de:	2b20      	cmp	r3, #32
 80048e0:	d009      	beq.n	80048f6 <UART_SetConfig+0x162>
 80048e2:	2b20      	cmp	r3, #32
 80048e4:	d810      	bhi.n	8004908 <UART_SetConfig+0x174>
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <UART_SetConfig+0x15c>
 80048ea:	2b10      	cmp	r3, #16
 80048ec:	d006      	beq.n	80048fc <UART_SetConfig+0x168>
 80048ee:	e00b      	b.n	8004908 <UART_SetConfig+0x174>
 80048f0:	2300      	movs	r3, #0
 80048f2:	77fb      	strb	r3, [r7, #31]
 80048f4:	e0f2      	b.n	8004adc <UART_SetConfig+0x348>
 80048f6:	2302      	movs	r3, #2
 80048f8:	77fb      	strb	r3, [r7, #31]
 80048fa:	e0ef      	b.n	8004adc <UART_SetConfig+0x348>
 80048fc:	2304      	movs	r3, #4
 80048fe:	77fb      	strb	r3, [r7, #31]
 8004900:	e0ec      	b.n	8004adc <UART_SetConfig+0x348>
 8004902:	2308      	movs	r3, #8
 8004904:	77fb      	strb	r3, [r7, #31]
 8004906:	e0e9      	b.n	8004adc <UART_SetConfig+0x348>
 8004908:	2310      	movs	r3, #16
 800490a:	77fb      	strb	r3, [r7, #31]
 800490c:	e0e6      	b.n	8004adc <UART_SetConfig+0x348>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a56      	ldr	r2, [pc, #344]	@ (8004a6c <UART_SetConfig+0x2d8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d120      	bne.n	800495a <UART_SetConfig+0x1c6>
 8004918:	4b51      	ldr	r3, [pc, #324]	@ (8004a60 <UART_SetConfig+0x2cc>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004922:	2bc0      	cmp	r3, #192	@ 0xc0
 8004924:	d013      	beq.n	800494e <UART_SetConfig+0x1ba>
 8004926:	2bc0      	cmp	r3, #192	@ 0xc0
 8004928:	d814      	bhi.n	8004954 <UART_SetConfig+0x1c0>
 800492a:	2b80      	cmp	r3, #128	@ 0x80
 800492c:	d009      	beq.n	8004942 <UART_SetConfig+0x1ae>
 800492e:	2b80      	cmp	r3, #128	@ 0x80
 8004930:	d810      	bhi.n	8004954 <UART_SetConfig+0x1c0>
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <UART_SetConfig+0x1a8>
 8004936:	2b40      	cmp	r3, #64	@ 0x40
 8004938:	d006      	beq.n	8004948 <UART_SetConfig+0x1b4>
 800493a:	e00b      	b.n	8004954 <UART_SetConfig+0x1c0>
 800493c:	2300      	movs	r3, #0
 800493e:	77fb      	strb	r3, [r7, #31]
 8004940:	e0cc      	b.n	8004adc <UART_SetConfig+0x348>
 8004942:	2302      	movs	r3, #2
 8004944:	77fb      	strb	r3, [r7, #31]
 8004946:	e0c9      	b.n	8004adc <UART_SetConfig+0x348>
 8004948:	2304      	movs	r3, #4
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e0c6      	b.n	8004adc <UART_SetConfig+0x348>
 800494e:	2308      	movs	r3, #8
 8004950:	77fb      	strb	r3, [r7, #31]
 8004952:	e0c3      	b.n	8004adc <UART_SetConfig+0x348>
 8004954:	2310      	movs	r3, #16
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	e0c0      	b.n	8004adc <UART_SetConfig+0x348>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a44      	ldr	r2, [pc, #272]	@ (8004a70 <UART_SetConfig+0x2dc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d125      	bne.n	80049b0 <UART_SetConfig+0x21c>
 8004964:	4b3e      	ldr	r3, [pc, #248]	@ (8004a60 <UART_SetConfig+0x2cc>)
 8004966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800496e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004972:	d017      	beq.n	80049a4 <UART_SetConfig+0x210>
 8004974:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004978:	d817      	bhi.n	80049aa <UART_SetConfig+0x216>
 800497a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800497e:	d00b      	beq.n	8004998 <UART_SetConfig+0x204>
 8004980:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004984:	d811      	bhi.n	80049aa <UART_SetConfig+0x216>
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <UART_SetConfig+0x1fe>
 800498a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800498e:	d006      	beq.n	800499e <UART_SetConfig+0x20a>
 8004990:	e00b      	b.n	80049aa <UART_SetConfig+0x216>
 8004992:	2300      	movs	r3, #0
 8004994:	77fb      	strb	r3, [r7, #31]
 8004996:	e0a1      	b.n	8004adc <UART_SetConfig+0x348>
 8004998:	2302      	movs	r3, #2
 800499a:	77fb      	strb	r3, [r7, #31]
 800499c:	e09e      	b.n	8004adc <UART_SetConfig+0x348>
 800499e:	2304      	movs	r3, #4
 80049a0:	77fb      	strb	r3, [r7, #31]
 80049a2:	e09b      	b.n	8004adc <UART_SetConfig+0x348>
 80049a4:	2308      	movs	r3, #8
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e098      	b.n	8004adc <UART_SetConfig+0x348>
 80049aa:	2310      	movs	r3, #16
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e095      	b.n	8004adc <UART_SetConfig+0x348>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a2f      	ldr	r2, [pc, #188]	@ (8004a74 <UART_SetConfig+0x2e0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d125      	bne.n	8004a06 <UART_SetConfig+0x272>
 80049ba:	4b29      	ldr	r3, [pc, #164]	@ (8004a60 <UART_SetConfig+0x2cc>)
 80049bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80049c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049c8:	d017      	beq.n	80049fa <UART_SetConfig+0x266>
 80049ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049ce:	d817      	bhi.n	8004a00 <UART_SetConfig+0x26c>
 80049d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049d4:	d00b      	beq.n	80049ee <UART_SetConfig+0x25a>
 80049d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049da:	d811      	bhi.n	8004a00 <UART_SetConfig+0x26c>
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <UART_SetConfig+0x254>
 80049e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049e4:	d006      	beq.n	80049f4 <UART_SetConfig+0x260>
 80049e6:	e00b      	b.n	8004a00 <UART_SetConfig+0x26c>
 80049e8:	2301      	movs	r3, #1
 80049ea:	77fb      	strb	r3, [r7, #31]
 80049ec:	e076      	b.n	8004adc <UART_SetConfig+0x348>
 80049ee:	2302      	movs	r3, #2
 80049f0:	77fb      	strb	r3, [r7, #31]
 80049f2:	e073      	b.n	8004adc <UART_SetConfig+0x348>
 80049f4:	2304      	movs	r3, #4
 80049f6:	77fb      	strb	r3, [r7, #31]
 80049f8:	e070      	b.n	8004adc <UART_SetConfig+0x348>
 80049fa:	2308      	movs	r3, #8
 80049fc:	77fb      	strb	r3, [r7, #31]
 80049fe:	e06d      	b.n	8004adc <UART_SetConfig+0x348>
 8004a00:	2310      	movs	r3, #16
 8004a02:	77fb      	strb	r3, [r7, #31]
 8004a04:	e06a      	b.n	8004adc <UART_SetConfig+0x348>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a1b      	ldr	r2, [pc, #108]	@ (8004a78 <UART_SetConfig+0x2e4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d138      	bne.n	8004a82 <UART_SetConfig+0x2ee>
 8004a10:	4b13      	ldr	r3, [pc, #76]	@ (8004a60 <UART_SetConfig+0x2cc>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a16:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004a1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a1e:	d017      	beq.n	8004a50 <UART_SetConfig+0x2bc>
 8004a20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a24:	d82a      	bhi.n	8004a7c <UART_SetConfig+0x2e8>
 8004a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a2a:	d00b      	beq.n	8004a44 <UART_SetConfig+0x2b0>
 8004a2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a30:	d824      	bhi.n	8004a7c <UART_SetConfig+0x2e8>
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <UART_SetConfig+0x2aa>
 8004a36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a3a:	d006      	beq.n	8004a4a <UART_SetConfig+0x2b6>
 8004a3c:	e01e      	b.n	8004a7c <UART_SetConfig+0x2e8>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	77fb      	strb	r3, [r7, #31]
 8004a42:	e04b      	b.n	8004adc <UART_SetConfig+0x348>
 8004a44:	2302      	movs	r3, #2
 8004a46:	77fb      	strb	r3, [r7, #31]
 8004a48:	e048      	b.n	8004adc <UART_SetConfig+0x348>
 8004a4a:	2304      	movs	r3, #4
 8004a4c:	77fb      	strb	r3, [r7, #31]
 8004a4e:	e045      	b.n	8004adc <UART_SetConfig+0x348>
 8004a50:	2308      	movs	r3, #8
 8004a52:	77fb      	strb	r3, [r7, #31]
 8004a54:	e042      	b.n	8004adc <UART_SetConfig+0x348>
 8004a56:	bf00      	nop
 8004a58:	efff69f3 	.word	0xefff69f3
 8004a5c:	40011000 	.word	0x40011000
 8004a60:	40023800 	.word	0x40023800
 8004a64:	40004400 	.word	0x40004400
 8004a68:	40004800 	.word	0x40004800
 8004a6c:	40004c00 	.word	0x40004c00
 8004a70:	40005000 	.word	0x40005000
 8004a74:	40011400 	.word	0x40011400
 8004a78:	40007800 	.word	0x40007800
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	77fb      	strb	r3, [r7, #31]
 8004a80:	e02c      	b.n	8004adc <UART_SetConfig+0x348>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a72      	ldr	r2, [pc, #456]	@ (8004c50 <UART_SetConfig+0x4bc>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d125      	bne.n	8004ad8 <UART_SetConfig+0x344>
 8004a8c:	4b71      	ldr	r3, [pc, #452]	@ (8004c54 <UART_SetConfig+0x4c0>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a92:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004a96:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004a9a:	d017      	beq.n	8004acc <UART_SetConfig+0x338>
 8004a9c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004aa0:	d817      	bhi.n	8004ad2 <UART_SetConfig+0x33e>
 8004aa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004aa6:	d00b      	beq.n	8004ac0 <UART_SetConfig+0x32c>
 8004aa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004aac:	d811      	bhi.n	8004ad2 <UART_SetConfig+0x33e>
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <UART_SetConfig+0x326>
 8004ab2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ab6:	d006      	beq.n	8004ac6 <UART_SetConfig+0x332>
 8004ab8:	e00b      	b.n	8004ad2 <UART_SetConfig+0x33e>
 8004aba:	2300      	movs	r3, #0
 8004abc:	77fb      	strb	r3, [r7, #31]
 8004abe:	e00d      	b.n	8004adc <UART_SetConfig+0x348>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	77fb      	strb	r3, [r7, #31]
 8004ac4:	e00a      	b.n	8004adc <UART_SetConfig+0x348>
 8004ac6:	2304      	movs	r3, #4
 8004ac8:	77fb      	strb	r3, [r7, #31]
 8004aca:	e007      	b.n	8004adc <UART_SetConfig+0x348>
 8004acc:	2308      	movs	r3, #8
 8004ace:	77fb      	strb	r3, [r7, #31]
 8004ad0:	e004      	b.n	8004adc <UART_SetConfig+0x348>
 8004ad2:	2310      	movs	r3, #16
 8004ad4:	77fb      	strb	r3, [r7, #31]
 8004ad6:	e001      	b.n	8004adc <UART_SetConfig+0x348>
 8004ad8:	2310      	movs	r3, #16
 8004ada:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ae4:	d15b      	bne.n	8004b9e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004ae6:	7ffb      	ldrb	r3, [r7, #31]
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d828      	bhi.n	8004b3e <UART_SetConfig+0x3aa>
 8004aec:	a201      	add	r2, pc, #4	@ (adr r2, 8004af4 <UART_SetConfig+0x360>)
 8004aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af2:	bf00      	nop
 8004af4:	08004b19 	.word	0x08004b19
 8004af8:	08004b21 	.word	0x08004b21
 8004afc:	08004b29 	.word	0x08004b29
 8004b00:	08004b3f 	.word	0x08004b3f
 8004b04:	08004b2f 	.word	0x08004b2f
 8004b08:	08004b3f 	.word	0x08004b3f
 8004b0c:	08004b3f 	.word	0x08004b3f
 8004b10:	08004b3f 	.word	0x08004b3f
 8004b14:	08004b37 	.word	0x08004b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b18:	f7fd fd96 	bl	8002648 <HAL_RCC_GetPCLK1Freq>
 8004b1c:	61b8      	str	r0, [r7, #24]
        break;
 8004b1e:	e013      	b.n	8004b48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b20:	f7fd fda6 	bl	8002670 <HAL_RCC_GetPCLK2Freq>
 8004b24:	61b8      	str	r0, [r7, #24]
        break;
 8004b26:	e00f      	b.n	8004b48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b28:	4b4b      	ldr	r3, [pc, #300]	@ (8004c58 <UART_SetConfig+0x4c4>)
 8004b2a:	61bb      	str	r3, [r7, #24]
        break;
 8004b2c:	e00c      	b.n	8004b48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b2e:	f7fd fcb9 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 8004b32:	61b8      	str	r0, [r7, #24]
        break;
 8004b34:	e008      	b.n	8004b48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b3a:	61bb      	str	r3, [r7, #24]
        break;
 8004b3c:	e004      	b.n	8004b48 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	77bb      	strb	r3, [r7, #30]
        break;
 8004b46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d074      	beq.n	8004c38 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	005a      	lsls	r2, r3, #1
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	085b      	lsrs	r3, r3, #1
 8004b58:	441a      	add	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	2b0f      	cmp	r3, #15
 8004b68:	d916      	bls.n	8004b98 <UART_SetConfig+0x404>
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b70:	d212      	bcs.n	8004b98 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	f023 030f 	bic.w	r3, r3, #15
 8004b7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	085b      	lsrs	r3, r3, #1
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	89fb      	ldrh	r3, [r7, #14]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	89fa      	ldrh	r2, [r7, #14]
 8004b94:	60da      	str	r2, [r3, #12]
 8004b96:	e04f      	b.n	8004c38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	77bb      	strb	r3, [r7, #30]
 8004b9c:	e04c      	b.n	8004c38 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b9e:	7ffb      	ldrb	r3, [r7, #31]
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d828      	bhi.n	8004bf6 <UART_SetConfig+0x462>
 8004ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bac <UART_SetConfig+0x418>)
 8004ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004baa:	bf00      	nop
 8004bac:	08004bd1 	.word	0x08004bd1
 8004bb0:	08004bd9 	.word	0x08004bd9
 8004bb4:	08004be1 	.word	0x08004be1
 8004bb8:	08004bf7 	.word	0x08004bf7
 8004bbc:	08004be7 	.word	0x08004be7
 8004bc0:	08004bf7 	.word	0x08004bf7
 8004bc4:	08004bf7 	.word	0x08004bf7
 8004bc8:	08004bf7 	.word	0x08004bf7
 8004bcc:	08004bef 	.word	0x08004bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd0:	f7fd fd3a 	bl	8002648 <HAL_RCC_GetPCLK1Freq>
 8004bd4:	61b8      	str	r0, [r7, #24]
        break;
 8004bd6:	e013      	b.n	8004c00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bd8:	f7fd fd4a 	bl	8002670 <HAL_RCC_GetPCLK2Freq>
 8004bdc:	61b8      	str	r0, [r7, #24]
        break;
 8004bde:	e00f      	b.n	8004c00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004be0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c58 <UART_SetConfig+0x4c4>)
 8004be2:	61bb      	str	r3, [r7, #24]
        break;
 8004be4:	e00c      	b.n	8004c00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004be6:	f7fd fc5d 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 8004bea:	61b8      	str	r0, [r7, #24]
        break;
 8004bec:	e008      	b.n	8004c00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bf2:	61bb      	str	r3, [r7, #24]
        break;
 8004bf4:	e004      	b.n	8004c00 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	77bb      	strb	r3, [r7, #30]
        break;
 8004bfe:	bf00      	nop
    }

    if (pclk != 0U)
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d018      	beq.n	8004c38 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	085a      	lsrs	r2, r3, #1
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	441a      	add	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b0f      	cmp	r3, #15
 8004c1e:	d909      	bls.n	8004c34 <UART_SetConfig+0x4a0>
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c26:	d205      	bcs.n	8004c34 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	60da      	str	r2, [r3, #12]
 8004c32:	e001      	b.n	8004c38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004c44:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	40007c00 	.word	0x40007c00
 8004c54:	40023800 	.word	0x40023800
 8004c58:	00f42400 	.word	0x00f42400

08004c5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c68:	f003 0308 	and.w	r3, r3, #8
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d01a      	beq.n	8004d72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d5a:	d10a      	bne.n	8004d72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	605a      	str	r2, [r3, #4]
  }
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08c      	sub	sp, #48	@ 0x30
 8004da4:	af02      	add	r7, sp, #8
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004db0:	f7fc fc12 	bl	80015d8 <HAL_GetTick>
 8004db4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0308 	and.w	r3, r3, #8
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d12e      	bne.n	8004e22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f83b 	bl	8004e4e <UART_WaitOnFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d021      	beq.n	8004e22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004df2:	623b      	str	r3, [r7, #32]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	61fb      	str	r3, [r7, #28]
 8004dfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e00:	69b9      	ldr	r1, [r7, #24]
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	e841 2300 	strex	r3, r2, [r1]
 8004e08:	617b      	str	r3, [r7, #20]
   return(result);
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e6      	bne.n	8004dde <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2220      	movs	r2, #32
 8004e14:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e011      	b.n	8004e46 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2220      	movs	r2, #32
 8004e26:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3728      	adds	r7, #40	@ 0x28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	603b      	str	r3, [r7, #0]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e5e:	e04f      	b.n	8004f00 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e66:	d04b      	beq.n	8004f00 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e68:	f7fc fbb6 	bl	80015d8 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d302      	bcc.n	8004e7e <UART_WaitOnFlagUntilTimeout+0x30>
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e04e      	b.n	8004f20 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d037      	beq.n	8004f00 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b80      	cmp	r3, #128	@ 0x80
 8004e94:	d034      	beq.n	8004f00 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b40      	cmp	r3, #64	@ 0x40
 8004e9a:	d031      	beq.n	8004f00 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d110      	bne.n	8004ecc <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2208      	movs	r2, #8
 8004eb0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 f8fe 	bl	80050b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2208      	movs	r2, #8
 8004ebc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e029      	b.n	8004f20 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ed6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eda:	d111      	bne.n	8004f00 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ee4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f8e4 	bl	80050b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e00f      	b.n	8004f20 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	69da      	ldr	r2, [r3, #28]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	bf0c      	ite	eq
 8004f10:	2301      	moveq	r3, #1
 8004f12:	2300      	movne	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	461a      	mov	r2, r3
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d0a0      	beq.n	8004e60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b097      	sub	sp, #92	@ 0x5c
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	4613      	mov	r3, r2
 8004f34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	88fa      	ldrh	r2, [r7, #6]
 8004f40:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	88fa      	ldrh	r2, [r7, #6]
 8004f48:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f5a:	d10e      	bne.n	8004f7a <UART_Start_Receive_IT+0x52>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d105      	bne.n	8004f70 <UART_Start_Receive_IT+0x48>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004f6a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f6e:	e02d      	b.n	8004fcc <UART_Start_Receive_IT+0xa4>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	22ff      	movs	r2, #255	@ 0xff
 8004f74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f78:	e028      	b.n	8004fcc <UART_Start_Receive_IT+0xa4>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10d      	bne.n	8004f9e <UART_Start_Receive_IT+0x76>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d104      	bne.n	8004f94 <UART_Start_Receive_IT+0x6c>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	22ff      	movs	r2, #255	@ 0xff
 8004f8e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f92:	e01b      	b.n	8004fcc <UART_Start_Receive_IT+0xa4>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	227f      	movs	r2, #127	@ 0x7f
 8004f98:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f9c:	e016      	b.n	8004fcc <UART_Start_Receive_IT+0xa4>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fa6:	d10d      	bne.n	8004fc4 <UART_Start_Receive_IT+0x9c>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d104      	bne.n	8004fba <UART_Start_Receive_IT+0x92>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	227f      	movs	r2, #127	@ 0x7f
 8004fb4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004fb8:	e008      	b.n	8004fcc <UART_Start_Receive_IT+0xa4>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	223f      	movs	r2, #63	@ 0x3f
 8004fbe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004fc2:	e003      	b.n	8004fcc <UART_Start_Receive_IT+0xa4>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2222      	movs	r2, #34	@ 0x22
 8004fd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3308      	adds	r3, #8
 8004fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fe6:	e853 3f00 	ldrex	r3, [r3]
 8004fea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fee:	f043 0301 	orr.w	r3, r3, #1
 8004ff2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	3308      	adds	r3, #8
 8004ffa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004ffc:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004ffe:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005000:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005002:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005004:	e841 2300 	strex	r3, r2, [r1]
 8005008:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800500a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1e5      	bne.n	8004fdc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005018:	d107      	bne.n	800502a <UART_Start_Receive_IT+0x102>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d103      	bne.n	800502a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4a21      	ldr	r2, [pc, #132]	@ (80050ac <UART_Start_Receive_IT+0x184>)
 8005026:	669a      	str	r2, [r3, #104]	@ 0x68
 8005028:	e002      	b.n	8005030 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4a20      	ldr	r2, [pc, #128]	@ (80050b0 <UART_Start_Receive_IT+0x188>)
 800502e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d019      	beq.n	800506c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005040:	e853 3f00 	ldrex	r3, [r3]
 8005044:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005048:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800504c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005056:	637b      	str	r3, [r7, #52]	@ 0x34
 8005058:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800505c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800505e:	e841 2300 	strex	r3, r2, [r1]
 8005062:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1e6      	bne.n	8005038 <UART_Start_Receive_IT+0x110>
 800506a:	e018      	b.n	800509e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	e853 3f00 	ldrex	r3, [r3]
 8005078:	613b      	str	r3, [r7, #16]
   return(result);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f043 0320 	orr.w	r3, r3, #32
 8005080:	653b      	str	r3, [r7, #80]	@ 0x50
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800508a:	623b      	str	r3, [r7, #32]
 800508c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508e:	69f9      	ldr	r1, [r7, #28]
 8005090:	6a3a      	ldr	r2, [r7, #32]
 8005092:	e841 2300 	strex	r3, r2, [r1]
 8005096:	61bb      	str	r3, [r7, #24]
   return(result);
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1e6      	bne.n	800506c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	375c      	adds	r7, #92	@ 0x5c
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	080053a5 	.word	0x080053a5
 80050b0:	080051fd 	.word	0x080051fd

080050b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b095      	sub	sp, #84	@ 0x54
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c4:	e853 3f00 	ldrex	r3, [r3]
 80050c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	461a      	mov	r2, r3
 80050d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050da:	643b      	str	r3, [r7, #64]	@ 0x40
 80050dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050e2:	e841 2300 	strex	r3, r2, [r1]
 80050e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1e6      	bne.n	80050bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3308      	adds	r3, #8
 80050f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	f023 0301 	bic.w	r3, r3, #1
 8005104:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3308      	adds	r3, #8
 800510c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800510e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005110:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005112:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005116:	e841 2300 	strex	r3, r2, [r1]
 800511a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800511c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1e5      	bne.n	80050ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005126:	2b01      	cmp	r3, #1
 8005128:	d118      	bne.n	800515c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	e853 3f00 	ldrex	r3, [r3]
 8005136:	60bb      	str	r3, [r7, #8]
   return(result);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f023 0310 	bic.w	r3, r3, #16
 800513e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005148:	61bb      	str	r3, [r7, #24]
 800514a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514c:	6979      	ldr	r1, [r7, #20]
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	e841 2300 	strex	r3, r2, [r1]
 8005154:	613b      	str	r3, [r7, #16]
   return(result);
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1e6      	bne.n	800512a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2220      	movs	r2, #32
 8005160:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005170:	bf00      	nop
 8005172:	3754      	adds	r7, #84	@ 0x54
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005188:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f7ff fae4 	bl	8004768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051a0:	bf00      	nop
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051c4:	61fb      	str	r3, [r7, #28]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	61bb      	str	r3, [r7, #24]
 80051d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d2:	6979      	ldr	r1, [r7, #20]
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	e841 2300 	strex	r3, r2, [r1]
 80051da:	613b      	str	r3, [r7, #16]
   return(result);
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1e6      	bne.n	80051b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2220      	movs	r2, #32
 80051e6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7ff fab0 	bl	8004754 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051f4:	bf00      	nop
 80051f6:	3720      	adds	r7, #32
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b09c      	sub	sp, #112	@ 0x70
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800520a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005214:	2b22      	cmp	r3, #34	@ 0x22
 8005216:	f040 80b9 	bne.w	800538c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005220:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005224:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005228:	b2d9      	uxtb	r1, r3
 800522a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800522e:	b2da      	uxtb	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005234:	400a      	ands	r2, r1
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	f040 809c 	bne.w	800539c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800526c:	e853 3f00 	ldrex	r3, [r3]
 8005270:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005272:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005274:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005278:	66bb      	str	r3, [r7, #104]	@ 0x68
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005282:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005284:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005286:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005288:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800528a:	e841 2300 	strex	r3, r2, [r1]
 800528e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005290:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1e6      	bne.n	8005264 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3308      	adds	r3, #8
 800529c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a8:	f023 0301 	bic.w	r3, r3, #1
 80052ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3308      	adds	r3, #8
 80052b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80052b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80052b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e5      	bne.n	8005296 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d018      	beq.n	800531e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	623b      	str	r3, [r7, #32]
   return(result);
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005300:	663b      	str	r3, [r7, #96]	@ 0x60
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800530a:	633b      	str	r3, [r7, #48]	@ 0x30
 800530c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e6      	bne.n	80052ec <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005322:	2b01      	cmp	r3, #1
 8005324:	d12e      	bne.n	8005384 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	60fb      	str	r3, [r7, #12]
   return(result);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f023 0310 	bic.w	r3, r3, #16
 8005340:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800534a:	61fb      	str	r3, [r7, #28]
 800534c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	69b9      	ldr	r1, [r7, #24]
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	617b      	str	r3, [r7, #20]
   return(result);
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e6      	bne.n	800532c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69db      	ldr	r3, [r3, #28]
 8005364:	f003 0310 	and.w	r3, r3, #16
 8005368:	2b10      	cmp	r3, #16
 800536a:	d103      	bne.n	8005374 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2210      	movs	r2, #16
 8005372:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800537a:	4619      	mov	r1, r3
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff f9fd 	bl	800477c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005382:	e00b      	b.n	800539c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7fb fa35 	bl	80007f4 <HAL_UART_RxCpltCallback>
}
 800538a:	e007      	b.n	800539c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0208 	orr.w	r2, r2, #8
 800539a:	619a      	str	r2, [r3, #24]
}
 800539c:	bf00      	nop
 800539e:	3770      	adds	r7, #112	@ 0x70
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b09c      	sub	sp, #112	@ 0x70
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80053b2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053bc:	2b22      	cmp	r3, #34	@ 0x22
 80053be:	f040 80b9 	bne.w	8005534 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80053d2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80053d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80053da:	4013      	ands	r3, r2
 80053dc:	b29a      	uxth	r2, r3
 80053de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e6:	1c9a      	adds	r2, r3, #2
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	f040 809c 	bne.w	8005544 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005412:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800541a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800541c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005420:	667b      	str	r3, [r7, #100]	@ 0x64
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800542a:	657b      	str	r3, [r7, #84]	@ 0x54
 800542c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005430:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005432:	e841 2300 	strex	r3, r2, [r1]
 8005436:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005438:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1e6      	bne.n	800540c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3308      	adds	r3, #8
 8005444:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005448:	e853 3f00 	ldrex	r3, [r3]
 800544c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800544e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005450:	f023 0301 	bic.w	r3, r3, #1
 8005454:	663b      	str	r3, [r7, #96]	@ 0x60
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3308      	adds	r3, #8
 800545c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800545e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005460:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005464:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800546c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1e5      	bne.n	800543e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2220      	movs	r2, #32
 8005476:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d018      	beq.n	80054c6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80054a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054b4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e6      	bne.n	8005494 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d12e      	bne.n	800552c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	e853 3f00 	ldrex	r3, [r3]
 80054e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f023 0310 	bic.w	r3, r3, #16
 80054e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054f2:	61bb      	str	r3, [r7, #24]
 80054f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f6:	6979      	ldr	r1, [r7, #20]
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	e841 2300 	strex	r3, r2, [r1]
 80054fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1e6      	bne.n	80054d4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69db      	ldr	r3, [r3, #28]
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	2b10      	cmp	r3, #16
 8005512:	d103      	bne.n	800551c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2210      	movs	r2, #16
 800551a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff f929 	bl	800477c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800552a:	e00b      	b.n	8005544 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7fb f961 	bl	80007f4 <HAL_UART_RxCpltCallback>
}
 8005532:	e007      	b.n	8005544 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699a      	ldr	r2, [r3, #24]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0208 	orr.w	r2, r2, #8
 8005542:	619a      	str	r2, [r3, #24]
}
 8005544:	bf00      	nop
 8005546:	3770      	adds	r7, #112	@ 0x70
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <siprintf>:
 800554c:	b40e      	push	{r1, r2, r3}
 800554e:	b500      	push	{lr}
 8005550:	b09c      	sub	sp, #112	@ 0x70
 8005552:	ab1d      	add	r3, sp, #116	@ 0x74
 8005554:	9002      	str	r0, [sp, #8]
 8005556:	9006      	str	r0, [sp, #24]
 8005558:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800555c:	4809      	ldr	r0, [pc, #36]	@ (8005584 <siprintf+0x38>)
 800555e:	9107      	str	r1, [sp, #28]
 8005560:	9104      	str	r1, [sp, #16]
 8005562:	4909      	ldr	r1, [pc, #36]	@ (8005588 <siprintf+0x3c>)
 8005564:	f853 2b04 	ldr.w	r2, [r3], #4
 8005568:	9105      	str	r1, [sp, #20]
 800556a:	6800      	ldr	r0, [r0, #0]
 800556c:	9301      	str	r3, [sp, #4]
 800556e:	a902      	add	r1, sp, #8
 8005570:	f000 f89c 	bl	80056ac <_svfiprintf_r>
 8005574:	9b02      	ldr	r3, [sp, #8]
 8005576:	2200      	movs	r2, #0
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	b01c      	add	sp, #112	@ 0x70
 800557c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005580:	b003      	add	sp, #12
 8005582:	4770      	bx	lr
 8005584:	2000000c 	.word	0x2000000c
 8005588:	ffff0208 	.word	0xffff0208

0800558c <memset>:
 800558c:	4402      	add	r2, r0
 800558e:	4603      	mov	r3, r0
 8005590:	4293      	cmp	r3, r2
 8005592:	d100      	bne.n	8005596 <memset+0xa>
 8005594:	4770      	bx	lr
 8005596:	f803 1b01 	strb.w	r1, [r3], #1
 800559a:	e7f9      	b.n	8005590 <memset+0x4>

0800559c <__errno>:
 800559c:	4b01      	ldr	r3, [pc, #4]	@ (80055a4 <__errno+0x8>)
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	2000000c 	.word	0x2000000c

080055a8 <__libc_init_array>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	4d0d      	ldr	r5, [pc, #52]	@ (80055e0 <__libc_init_array+0x38>)
 80055ac:	4c0d      	ldr	r4, [pc, #52]	@ (80055e4 <__libc_init_array+0x3c>)
 80055ae:	1b64      	subs	r4, r4, r5
 80055b0:	10a4      	asrs	r4, r4, #2
 80055b2:	2600      	movs	r6, #0
 80055b4:	42a6      	cmp	r6, r4
 80055b6:	d109      	bne.n	80055cc <__libc_init_array+0x24>
 80055b8:	4d0b      	ldr	r5, [pc, #44]	@ (80055e8 <__libc_init_array+0x40>)
 80055ba:	4c0c      	ldr	r4, [pc, #48]	@ (80055ec <__libc_init_array+0x44>)
 80055bc:	f000 fc66 	bl	8005e8c <_init>
 80055c0:	1b64      	subs	r4, r4, r5
 80055c2:	10a4      	asrs	r4, r4, #2
 80055c4:	2600      	movs	r6, #0
 80055c6:	42a6      	cmp	r6, r4
 80055c8:	d105      	bne.n	80055d6 <__libc_init_array+0x2e>
 80055ca:	bd70      	pop	{r4, r5, r6, pc}
 80055cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80055d0:	4798      	blx	r3
 80055d2:	3601      	adds	r6, #1
 80055d4:	e7ee      	b.n	80055b4 <__libc_init_array+0xc>
 80055d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055da:	4798      	blx	r3
 80055dc:	3601      	adds	r6, #1
 80055de:	e7f2      	b.n	80055c6 <__libc_init_array+0x1e>
 80055e0:	08005f74 	.word	0x08005f74
 80055e4:	08005f74 	.word	0x08005f74
 80055e8:	08005f74 	.word	0x08005f74
 80055ec:	08005f78 	.word	0x08005f78

080055f0 <__retarget_lock_acquire_recursive>:
 80055f0:	4770      	bx	lr

080055f2 <__retarget_lock_release_recursive>:
 80055f2:	4770      	bx	lr

080055f4 <__ssputs_r>:
 80055f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f8:	688e      	ldr	r6, [r1, #8]
 80055fa:	461f      	mov	r7, r3
 80055fc:	42be      	cmp	r6, r7
 80055fe:	680b      	ldr	r3, [r1, #0]
 8005600:	4682      	mov	sl, r0
 8005602:	460c      	mov	r4, r1
 8005604:	4690      	mov	r8, r2
 8005606:	d82d      	bhi.n	8005664 <__ssputs_r+0x70>
 8005608:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800560c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005610:	d026      	beq.n	8005660 <__ssputs_r+0x6c>
 8005612:	6965      	ldr	r5, [r4, #20]
 8005614:	6909      	ldr	r1, [r1, #16]
 8005616:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800561a:	eba3 0901 	sub.w	r9, r3, r1
 800561e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005622:	1c7b      	adds	r3, r7, #1
 8005624:	444b      	add	r3, r9
 8005626:	106d      	asrs	r5, r5, #1
 8005628:	429d      	cmp	r5, r3
 800562a:	bf38      	it	cc
 800562c:	461d      	movcc	r5, r3
 800562e:	0553      	lsls	r3, r2, #21
 8005630:	d527      	bpl.n	8005682 <__ssputs_r+0x8e>
 8005632:	4629      	mov	r1, r5
 8005634:	f000 f958 	bl	80058e8 <_malloc_r>
 8005638:	4606      	mov	r6, r0
 800563a:	b360      	cbz	r0, 8005696 <__ssputs_r+0xa2>
 800563c:	6921      	ldr	r1, [r4, #16]
 800563e:	464a      	mov	r2, r9
 8005640:	f000 fbc4 	bl	8005dcc <memcpy>
 8005644:	89a3      	ldrh	r3, [r4, #12]
 8005646:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800564a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800564e:	81a3      	strh	r3, [r4, #12]
 8005650:	6126      	str	r6, [r4, #16]
 8005652:	6165      	str	r5, [r4, #20]
 8005654:	444e      	add	r6, r9
 8005656:	eba5 0509 	sub.w	r5, r5, r9
 800565a:	6026      	str	r6, [r4, #0]
 800565c:	60a5      	str	r5, [r4, #8]
 800565e:	463e      	mov	r6, r7
 8005660:	42be      	cmp	r6, r7
 8005662:	d900      	bls.n	8005666 <__ssputs_r+0x72>
 8005664:	463e      	mov	r6, r7
 8005666:	6820      	ldr	r0, [r4, #0]
 8005668:	4632      	mov	r2, r6
 800566a:	4641      	mov	r1, r8
 800566c:	f000 fb84 	bl	8005d78 <memmove>
 8005670:	68a3      	ldr	r3, [r4, #8]
 8005672:	1b9b      	subs	r3, r3, r6
 8005674:	60a3      	str	r3, [r4, #8]
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	4433      	add	r3, r6
 800567a:	6023      	str	r3, [r4, #0]
 800567c:	2000      	movs	r0, #0
 800567e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005682:	462a      	mov	r2, r5
 8005684:	f000 fb4a 	bl	8005d1c <_realloc_r>
 8005688:	4606      	mov	r6, r0
 800568a:	2800      	cmp	r0, #0
 800568c:	d1e0      	bne.n	8005650 <__ssputs_r+0x5c>
 800568e:	6921      	ldr	r1, [r4, #16]
 8005690:	4650      	mov	r0, sl
 8005692:	f000 fba9 	bl	8005de8 <_free_r>
 8005696:	230c      	movs	r3, #12
 8005698:	f8ca 3000 	str.w	r3, [sl]
 800569c:	89a3      	ldrh	r3, [r4, #12]
 800569e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056a2:	81a3      	strh	r3, [r4, #12]
 80056a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056a8:	e7e9      	b.n	800567e <__ssputs_r+0x8a>
	...

080056ac <_svfiprintf_r>:
 80056ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b0:	4698      	mov	r8, r3
 80056b2:	898b      	ldrh	r3, [r1, #12]
 80056b4:	061b      	lsls	r3, r3, #24
 80056b6:	b09d      	sub	sp, #116	@ 0x74
 80056b8:	4607      	mov	r7, r0
 80056ba:	460d      	mov	r5, r1
 80056bc:	4614      	mov	r4, r2
 80056be:	d510      	bpl.n	80056e2 <_svfiprintf_r+0x36>
 80056c0:	690b      	ldr	r3, [r1, #16]
 80056c2:	b973      	cbnz	r3, 80056e2 <_svfiprintf_r+0x36>
 80056c4:	2140      	movs	r1, #64	@ 0x40
 80056c6:	f000 f90f 	bl	80058e8 <_malloc_r>
 80056ca:	6028      	str	r0, [r5, #0]
 80056cc:	6128      	str	r0, [r5, #16]
 80056ce:	b930      	cbnz	r0, 80056de <_svfiprintf_r+0x32>
 80056d0:	230c      	movs	r3, #12
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056d8:	b01d      	add	sp, #116	@ 0x74
 80056da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056de:	2340      	movs	r3, #64	@ 0x40
 80056e0:	616b      	str	r3, [r5, #20]
 80056e2:	2300      	movs	r3, #0
 80056e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80056e6:	2320      	movs	r3, #32
 80056e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80056f0:	2330      	movs	r3, #48	@ 0x30
 80056f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005890 <_svfiprintf_r+0x1e4>
 80056f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056fa:	f04f 0901 	mov.w	r9, #1
 80056fe:	4623      	mov	r3, r4
 8005700:	469a      	mov	sl, r3
 8005702:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005706:	b10a      	cbz	r2, 800570c <_svfiprintf_r+0x60>
 8005708:	2a25      	cmp	r2, #37	@ 0x25
 800570a:	d1f9      	bne.n	8005700 <_svfiprintf_r+0x54>
 800570c:	ebba 0b04 	subs.w	fp, sl, r4
 8005710:	d00b      	beq.n	800572a <_svfiprintf_r+0x7e>
 8005712:	465b      	mov	r3, fp
 8005714:	4622      	mov	r2, r4
 8005716:	4629      	mov	r1, r5
 8005718:	4638      	mov	r0, r7
 800571a:	f7ff ff6b 	bl	80055f4 <__ssputs_r>
 800571e:	3001      	adds	r0, #1
 8005720:	f000 80a7 	beq.w	8005872 <_svfiprintf_r+0x1c6>
 8005724:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005726:	445a      	add	r2, fp
 8005728:	9209      	str	r2, [sp, #36]	@ 0x24
 800572a:	f89a 3000 	ldrb.w	r3, [sl]
 800572e:	2b00      	cmp	r3, #0
 8005730:	f000 809f 	beq.w	8005872 <_svfiprintf_r+0x1c6>
 8005734:	2300      	movs	r3, #0
 8005736:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800573a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800573e:	f10a 0a01 	add.w	sl, sl, #1
 8005742:	9304      	str	r3, [sp, #16]
 8005744:	9307      	str	r3, [sp, #28]
 8005746:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800574a:	931a      	str	r3, [sp, #104]	@ 0x68
 800574c:	4654      	mov	r4, sl
 800574e:	2205      	movs	r2, #5
 8005750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005754:	484e      	ldr	r0, [pc, #312]	@ (8005890 <_svfiprintf_r+0x1e4>)
 8005756:	f7fa fd63 	bl	8000220 <memchr>
 800575a:	9a04      	ldr	r2, [sp, #16]
 800575c:	b9d8      	cbnz	r0, 8005796 <_svfiprintf_r+0xea>
 800575e:	06d0      	lsls	r0, r2, #27
 8005760:	bf44      	itt	mi
 8005762:	2320      	movmi	r3, #32
 8005764:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005768:	0711      	lsls	r1, r2, #28
 800576a:	bf44      	itt	mi
 800576c:	232b      	movmi	r3, #43	@ 0x2b
 800576e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005772:	f89a 3000 	ldrb.w	r3, [sl]
 8005776:	2b2a      	cmp	r3, #42	@ 0x2a
 8005778:	d015      	beq.n	80057a6 <_svfiprintf_r+0xfa>
 800577a:	9a07      	ldr	r2, [sp, #28]
 800577c:	4654      	mov	r4, sl
 800577e:	2000      	movs	r0, #0
 8005780:	f04f 0c0a 	mov.w	ip, #10
 8005784:	4621      	mov	r1, r4
 8005786:	f811 3b01 	ldrb.w	r3, [r1], #1
 800578a:	3b30      	subs	r3, #48	@ 0x30
 800578c:	2b09      	cmp	r3, #9
 800578e:	d94b      	bls.n	8005828 <_svfiprintf_r+0x17c>
 8005790:	b1b0      	cbz	r0, 80057c0 <_svfiprintf_r+0x114>
 8005792:	9207      	str	r2, [sp, #28]
 8005794:	e014      	b.n	80057c0 <_svfiprintf_r+0x114>
 8005796:	eba0 0308 	sub.w	r3, r0, r8
 800579a:	fa09 f303 	lsl.w	r3, r9, r3
 800579e:	4313      	orrs	r3, r2
 80057a0:	9304      	str	r3, [sp, #16]
 80057a2:	46a2      	mov	sl, r4
 80057a4:	e7d2      	b.n	800574c <_svfiprintf_r+0xa0>
 80057a6:	9b03      	ldr	r3, [sp, #12]
 80057a8:	1d19      	adds	r1, r3, #4
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	9103      	str	r1, [sp, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	bfbb      	ittet	lt
 80057b2:	425b      	neglt	r3, r3
 80057b4:	f042 0202 	orrlt.w	r2, r2, #2
 80057b8:	9307      	strge	r3, [sp, #28]
 80057ba:	9307      	strlt	r3, [sp, #28]
 80057bc:	bfb8      	it	lt
 80057be:	9204      	strlt	r2, [sp, #16]
 80057c0:	7823      	ldrb	r3, [r4, #0]
 80057c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80057c4:	d10a      	bne.n	80057dc <_svfiprintf_r+0x130>
 80057c6:	7863      	ldrb	r3, [r4, #1]
 80057c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80057ca:	d132      	bne.n	8005832 <_svfiprintf_r+0x186>
 80057cc:	9b03      	ldr	r3, [sp, #12]
 80057ce:	1d1a      	adds	r2, r3, #4
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	9203      	str	r2, [sp, #12]
 80057d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057d8:	3402      	adds	r4, #2
 80057da:	9305      	str	r3, [sp, #20]
 80057dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80058a0 <_svfiprintf_r+0x1f4>
 80057e0:	7821      	ldrb	r1, [r4, #0]
 80057e2:	2203      	movs	r2, #3
 80057e4:	4650      	mov	r0, sl
 80057e6:	f7fa fd1b 	bl	8000220 <memchr>
 80057ea:	b138      	cbz	r0, 80057fc <_svfiprintf_r+0x150>
 80057ec:	9b04      	ldr	r3, [sp, #16]
 80057ee:	eba0 000a 	sub.w	r0, r0, sl
 80057f2:	2240      	movs	r2, #64	@ 0x40
 80057f4:	4082      	lsls	r2, r0
 80057f6:	4313      	orrs	r3, r2
 80057f8:	3401      	adds	r4, #1
 80057fa:	9304      	str	r3, [sp, #16]
 80057fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005800:	4824      	ldr	r0, [pc, #144]	@ (8005894 <_svfiprintf_r+0x1e8>)
 8005802:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005806:	2206      	movs	r2, #6
 8005808:	f7fa fd0a 	bl	8000220 <memchr>
 800580c:	2800      	cmp	r0, #0
 800580e:	d036      	beq.n	800587e <_svfiprintf_r+0x1d2>
 8005810:	4b21      	ldr	r3, [pc, #132]	@ (8005898 <_svfiprintf_r+0x1ec>)
 8005812:	bb1b      	cbnz	r3, 800585c <_svfiprintf_r+0x1b0>
 8005814:	9b03      	ldr	r3, [sp, #12]
 8005816:	3307      	adds	r3, #7
 8005818:	f023 0307 	bic.w	r3, r3, #7
 800581c:	3308      	adds	r3, #8
 800581e:	9303      	str	r3, [sp, #12]
 8005820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005822:	4433      	add	r3, r6
 8005824:	9309      	str	r3, [sp, #36]	@ 0x24
 8005826:	e76a      	b.n	80056fe <_svfiprintf_r+0x52>
 8005828:	fb0c 3202 	mla	r2, ip, r2, r3
 800582c:	460c      	mov	r4, r1
 800582e:	2001      	movs	r0, #1
 8005830:	e7a8      	b.n	8005784 <_svfiprintf_r+0xd8>
 8005832:	2300      	movs	r3, #0
 8005834:	3401      	adds	r4, #1
 8005836:	9305      	str	r3, [sp, #20]
 8005838:	4619      	mov	r1, r3
 800583a:	f04f 0c0a 	mov.w	ip, #10
 800583e:	4620      	mov	r0, r4
 8005840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005844:	3a30      	subs	r2, #48	@ 0x30
 8005846:	2a09      	cmp	r2, #9
 8005848:	d903      	bls.n	8005852 <_svfiprintf_r+0x1a6>
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0c6      	beq.n	80057dc <_svfiprintf_r+0x130>
 800584e:	9105      	str	r1, [sp, #20]
 8005850:	e7c4      	b.n	80057dc <_svfiprintf_r+0x130>
 8005852:	fb0c 2101 	mla	r1, ip, r1, r2
 8005856:	4604      	mov	r4, r0
 8005858:	2301      	movs	r3, #1
 800585a:	e7f0      	b.n	800583e <_svfiprintf_r+0x192>
 800585c:	ab03      	add	r3, sp, #12
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	462a      	mov	r2, r5
 8005862:	4b0e      	ldr	r3, [pc, #56]	@ (800589c <_svfiprintf_r+0x1f0>)
 8005864:	a904      	add	r1, sp, #16
 8005866:	4638      	mov	r0, r7
 8005868:	f3af 8000 	nop.w
 800586c:	1c42      	adds	r2, r0, #1
 800586e:	4606      	mov	r6, r0
 8005870:	d1d6      	bne.n	8005820 <_svfiprintf_r+0x174>
 8005872:	89ab      	ldrh	r3, [r5, #12]
 8005874:	065b      	lsls	r3, r3, #25
 8005876:	f53f af2d 	bmi.w	80056d4 <_svfiprintf_r+0x28>
 800587a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800587c:	e72c      	b.n	80056d8 <_svfiprintf_r+0x2c>
 800587e:	ab03      	add	r3, sp, #12
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	462a      	mov	r2, r5
 8005884:	4b05      	ldr	r3, [pc, #20]	@ (800589c <_svfiprintf_r+0x1f0>)
 8005886:	a904      	add	r1, sp, #16
 8005888:	4638      	mov	r0, r7
 800588a:	f000 f91b 	bl	8005ac4 <_printf_i>
 800588e:	e7ed      	b.n	800586c <_svfiprintf_r+0x1c0>
 8005890:	08005f38 	.word	0x08005f38
 8005894:	08005f42 	.word	0x08005f42
 8005898:	00000000 	.word	0x00000000
 800589c:	080055f5 	.word	0x080055f5
 80058a0:	08005f3e 	.word	0x08005f3e

080058a4 <sbrk_aligned>:
 80058a4:	b570      	push	{r4, r5, r6, lr}
 80058a6:	4e0f      	ldr	r6, [pc, #60]	@ (80058e4 <sbrk_aligned+0x40>)
 80058a8:	460c      	mov	r4, r1
 80058aa:	6831      	ldr	r1, [r6, #0]
 80058ac:	4605      	mov	r5, r0
 80058ae:	b911      	cbnz	r1, 80058b6 <sbrk_aligned+0x12>
 80058b0:	f000 fa7c 	bl	8005dac <_sbrk_r>
 80058b4:	6030      	str	r0, [r6, #0]
 80058b6:	4621      	mov	r1, r4
 80058b8:	4628      	mov	r0, r5
 80058ba:	f000 fa77 	bl	8005dac <_sbrk_r>
 80058be:	1c43      	adds	r3, r0, #1
 80058c0:	d103      	bne.n	80058ca <sbrk_aligned+0x26>
 80058c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80058c6:	4620      	mov	r0, r4
 80058c8:	bd70      	pop	{r4, r5, r6, pc}
 80058ca:	1cc4      	adds	r4, r0, #3
 80058cc:	f024 0403 	bic.w	r4, r4, #3
 80058d0:	42a0      	cmp	r0, r4
 80058d2:	d0f8      	beq.n	80058c6 <sbrk_aligned+0x22>
 80058d4:	1a21      	subs	r1, r4, r0
 80058d6:	4628      	mov	r0, r5
 80058d8:	f000 fa68 	bl	8005dac <_sbrk_r>
 80058dc:	3001      	adds	r0, #1
 80058de:	d1f2      	bne.n	80058c6 <sbrk_aligned+0x22>
 80058e0:	e7ef      	b.n	80058c2 <sbrk_aligned+0x1e>
 80058e2:	bf00      	nop
 80058e4:	20000a10 	.word	0x20000a10

080058e8 <_malloc_r>:
 80058e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058ec:	1ccd      	adds	r5, r1, #3
 80058ee:	f025 0503 	bic.w	r5, r5, #3
 80058f2:	3508      	adds	r5, #8
 80058f4:	2d0c      	cmp	r5, #12
 80058f6:	bf38      	it	cc
 80058f8:	250c      	movcc	r5, #12
 80058fa:	2d00      	cmp	r5, #0
 80058fc:	4606      	mov	r6, r0
 80058fe:	db01      	blt.n	8005904 <_malloc_r+0x1c>
 8005900:	42a9      	cmp	r1, r5
 8005902:	d904      	bls.n	800590e <_malloc_r+0x26>
 8005904:	230c      	movs	r3, #12
 8005906:	6033      	str	r3, [r6, #0]
 8005908:	2000      	movs	r0, #0
 800590a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800590e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059e4 <_malloc_r+0xfc>
 8005912:	f000 f9f7 	bl	8005d04 <__malloc_lock>
 8005916:	f8d8 3000 	ldr.w	r3, [r8]
 800591a:	461c      	mov	r4, r3
 800591c:	bb44      	cbnz	r4, 8005970 <_malloc_r+0x88>
 800591e:	4629      	mov	r1, r5
 8005920:	4630      	mov	r0, r6
 8005922:	f7ff ffbf 	bl	80058a4 <sbrk_aligned>
 8005926:	1c43      	adds	r3, r0, #1
 8005928:	4604      	mov	r4, r0
 800592a:	d158      	bne.n	80059de <_malloc_r+0xf6>
 800592c:	f8d8 4000 	ldr.w	r4, [r8]
 8005930:	4627      	mov	r7, r4
 8005932:	2f00      	cmp	r7, #0
 8005934:	d143      	bne.n	80059be <_malloc_r+0xd6>
 8005936:	2c00      	cmp	r4, #0
 8005938:	d04b      	beq.n	80059d2 <_malloc_r+0xea>
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	4639      	mov	r1, r7
 800593e:	4630      	mov	r0, r6
 8005940:	eb04 0903 	add.w	r9, r4, r3
 8005944:	f000 fa32 	bl	8005dac <_sbrk_r>
 8005948:	4581      	cmp	r9, r0
 800594a:	d142      	bne.n	80059d2 <_malloc_r+0xea>
 800594c:	6821      	ldr	r1, [r4, #0]
 800594e:	1a6d      	subs	r5, r5, r1
 8005950:	4629      	mov	r1, r5
 8005952:	4630      	mov	r0, r6
 8005954:	f7ff ffa6 	bl	80058a4 <sbrk_aligned>
 8005958:	3001      	adds	r0, #1
 800595a:	d03a      	beq.n	80059d2 <_malloc_r+0xea>
 800595c:	6823      	ldr	r3, [r4, #0]
 800595e:	442b      	add	r3, r5
 8005960:	6023      	str	r3, [r4, #0]
 8005962:	f8d8 3000 	ldr.w	r3, [r8]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	bb62      	cbnz	r2, 80059c4 <_malloc_r+0xdc>
 800596a:	f8c8 7000 	str.w	r7, [r8]
 800596e:	e00f      	b.n	8005990 <_malloc_r+0xa8>
 8005970:	6822      	ldr	r2, [r4, #0]
 8005972:	1b52      	subs	r2, r2, r5
 8005974:	d420      	bmi.n	80059b8 <_malloc_r+0xd0>
 8005976:	2a0b      	cmp	r2, #11
 8005978:	d917      	bls.n	80059aa <_malloc_r+0xc2>
 800597a:	1961      	adds	r1, r4, r5
 800597c:	42a3      	cmp	r3, r4
 800597e:	6025      	str	r5, [r4, #0]
 8005980:	bf18      	it	ne
 8005982:	6059      	strne	r1, [r3, #4]
 8005984:	6863      	ldr	r3, [r4, #4]
 8005986:	bf08      	it	eq
 8005988:	f8c8 1000 	streq.w	r1, [r8]
 800598c:	5162      	str	r2, [r4, r5]
 800598e:	604b      	str	r3, [r1, #4]
 8005990:	4630      	mov	r0, r6
 8005992:	f000 f9bd 	bl	8005d10 <__malloc_unlock>
 8005996:	f104 000b 	add.w	r0, r4, #11
 800599a:	1d23      	adds	r3, r4, #4
 800599c:	f020 0007 	bic.w	r0, r0, #7
 80059a0:	1ac2      	subs	r2, r0, r3
 80059a2:	bf1c      	itt	ne
 80059a4:	1a1b      	subne	r3, r3, r0
 80059a6:	50a3      	strne	r3, [r4, r2]
 80059a8:	e7af      	b.n	800590a <_malloc_r+0x22>
 80059aa:	6862      	ldr	r2, [r4, #4]
 80059ac:	42a3      	cmp	r3, r4
 80059ae:	bf0c      	ite	eq
 80059b0:	f8c8 2000 	streq.w	r2, [r8]
 80059b4:	605a      	strne	r2, [r3, #4]
 80059b6:	e7eb      	b.n	8005990 <_malloc_r+0xa8>
 80059b8:	4623      	mov	r3, r4
 80059ba:	6864      	ldr	r4, [r4, #4]
 80059bc:	e7ae      	b.n	800591c <_malloc_r+0x34>
 80059be:	463c      	mov	r4, r7
 80059c0:	687f      	ldr	r7, [r7, #4]
 80059c2:	e7b6      	b.n	8005932 <_malloc_r+0x4a>
 80059c4:	461a      	mov	r2, r3
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	42a3      	cmp	r3, r4
 80059ca:	d1fb      	bne.n	80059c4 <_malloc_r+0xdc>
 80059cc:	2300      	movs	r3, #0
 80059ce:	6053      	str	r3, [r2, #4]
 80059d0:	e7de      	b.n	8005990 <_malloc_r+0xa8>
 80059d2:	230c      	movs	r3, #12
 80059d4:	6033      	str	r3, [r6, #0]
 80059d6:	4630      	mov	r0, r6
 80059d8:	f000 f99a 	bl	8005d10 <__malloc_unlock>
 80059dc:	e794      	b.n	8005908 <_malloc_r+0x20>
 80059de:	6005      	str	r5, [r0, #0]
 80059e0:	e7d6      	b.n	8005990 <_malloc_r+0xa8>
 80059e2:	bf00      	nop
 80059e4:	20000a14 	.word	0x20000a14

080059e8 <_printf_common>:
 80059e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059ec:	4616      	mov	r6, r2
 80059ee:	4698      	mov	r8, r3
 80059f0:	688a      	ldr	r2, [r1, #8]
 80059f2:	690b      	ldr	r3, [r1, #16]
 80059f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059f8:	4293      	cmp	r3, r2
 80059fa:	bfb8      	it	lt
 80059fc:	4613      	movlt	r3, r2
 80059fe:	6033      	str	r3, [r6, #0]
 8005a00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a04:	4607      	mov	r7, r0
 8005a06:	460c      	mov	r4, r1
 8005a08:	b10a      	cbz	r2, 8005a0e <_printf_common+0x26>
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	6033      	str	r3, [r6, #0]
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	0699      	lsls	r1, r3, #26
 8005a12:	bf42      	ittt	mi
 8005a14:	6833      	ldrmi	r3, [r6, #0]
 8005a16:	3302      	addmi	r3, #2
 8005a18:	6033      	strmi	r3, [r6, #0]
 8005a1a:	6825      	ldr	r5, [r4, #0]
 8005a1c:	f015 0506 	ands.w	r5, r5, #6
 8005a20:	d106      	bne.n	8005a30 <_printf_common+0x48>
 8005a22:	f104 0a19 	add.w	sl, r4, #25
 8005a26:	68e3      	ldr	r3, [r4, #12]
 8005a28:	6832      	ldr	r2, [r6, #0]
 8005a2a:	1a9b      	subs	r3, r3, r2
 8005a2c:	42ab      	cmp	r3, r5
 8005a2e:	dc26      	bgt.n	8005a7e <_printf_common+0x96>
 8005a30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a34:	6822      	ldr	r2, [r4, #0]
 8005a36:	3b00      	subs	r3, #0
 8005a38:	bf18      	it	ne
 8005a3a:	2301      	movne	r3, #1
 8005a3c:	0692      	lsls	r2, r2, #26
 8005a3e:	d42b      	bmi.n	8005a98 <_printf_common+0xb0>
 8005a40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a44:	4641      	mov	r1, r8
 8005a46:	4638      	mov	r0, r7
 8005a48:	47c8      	blx	r9
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	d01e      	beq.n	8005a8c <_printf_common+0xa4>
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	6922      	ldr	r2, [r4, #16]
 8005a52:	f003 0306 	and.w	r3, r3, #6
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	bf02      	ittt	eq
 8005a5a:	68e5      	ldreq	r5, [r4, #12]
 8005a5c:	6833      	ldreq	r3, [r6, #0]
 8005a5e:	1aed      	subeq	r5, r5, r3
 8005a60:	68a3      	ldr	r3, [r4, #8]
 8005a62:	bf0c      	ite	eq
 8005a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a68:	2500      	movne	r5, #0
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	bfc4      	itt	gt
 8005a6e:	1a9b      	subgt	r3, r3, r2
 8005a70:	18ed      	addgt	r5, r5, r3
 8005a72:	2600      	movs	r6, #0
 8005a74:	341a      	adds	r4, #26
 8005a76:	42b5      	cmp	r5, r6
 8005a78:	d11a      	bne.n	8005ab0 <_printf_common+0xc8>
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	e008      	b.n	8005a90 <_printf_common+0xa8>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4652      	mov	r2, sl
 8005a82:	4641      	mov	r1, r8
 8005a84:	4638      	mov	r0, r7
 8005a86:	47c8      	blx	r9
 8005a88:	3001      	adds	r0, #1
 8005a8a:	d103      	bne.n	8005a94 <_printf_common+0xac>
 8005a8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a94:	3501      	adds	r5, #1
 8005a96:	e7c6      	b.n	8005a26 <_printf_common+0x3e>
 8005a98:	18e1      	adds	r1, r4, r3
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	2030      	movs	r0, #48	@ 0x30
 8005a9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005aa2:	4422      	add	r2, r4
 8005aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005aa8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005aac:	3302      	adds	r3, #2
 8005aae:	e7c7      	b.n	8005a40 <_printf_common+0x58>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	4641      	mov	r1, r8
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	47c8      	blx	r9
 8005aba:	3001      	adds	r0, #1
 8005abc:	d0e6      	beq.n	8005a8c <_printf_common+0xa4>
 8005abe:	3601      	adds	r6, #1
 8005ac0:	e7d9      	b.n	8005a76 <_printf_common+0x8e>
	...

08005ac4 <_printf_i>:
 8005ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac8:	7e0f      	ldrb	r7, [r1, #24]
 8005aca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005acc:	2f78      	cmp	r7, #120	@ 0x78
 8005ace:	4691      	mov	r9, r2
 8005ad0:	4680      	mov	r8, r0
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	469a      	mov	sl, r3
 8005ad6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ada:	d807      	bhi.n	8005aec <_printf_i+0x28>
 8005adc:	2f62      	cmp	r7, #98	@ 0x62
 8005ade:	d80a      	bhi.n	8005af6 <_printf_i+0x32>
 8005ae0:	2f00      	cmp	r7, #0
 8005ae2:	f000 80d2 	beq.w	8005c8a <_printf_i+0x1c6>
 8005ae6:	2f58      	cmp	r7, #88	@ 0x58
 8005ae8:	f000 80b9 	beq.w	8005c5e <_printf_i+0x19a>
 8005aec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005af0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005af4:	e03a      	b.n	8005b6c <_printf_i+0xa8>
 8005af6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005afa:	2b15      	cmp	r3, #21
 8005afc:	d8f6      	bhi.n	8005aec <_printf_i+0x28>
 8005afe:	a101      	add	r1, pc, #4	@ (adr r1, 8005b04 <_printf_i+0x40>)
 8005b00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b04:	08005b5d 	.word	0x08005b5d
 8005b08:	08005b71 	.word	0x08005b71
 8005b0c:	08005aed 	.word	0x08005aed
 8005b10:	08005aed 	.word	0x08005aed
 8005b14:	08005aed 	.word	0x08005aed
 8005b18:	08005aed 	.word	0x08005aed
 8005b1c:	08005b71 	.word	0x08005b71
 8005b20:	08005aed 	.word	0x08005aed
 8005b24:	08005aed 	.word	0x08005aed
 8005b28:	08005aed 	.word	0x08005aed
 8005b2c:	08005aed 	.word	0x08005aed
 8005b30:	08005c71 	.word	0x08005c71
 8005b34:	08005b9b 	.word	0x08005b9b
 8005b38:	08005c2b 	.word	0x08005c2b
 8005b3c:	08005aed 	.word	0x08005aed
 8005b40:	08005aed 	.word	0x08005aed
 8005b44:	08005c93 	.word	0x08005c93
 8005b48:	08005aed 	.word	0x08005aed
 8005b4c:	08005b9b 	.word	0x08005b9b
 8005b50:	08005aed 	.word	0x08005aed
 8005b54:	08005aed 	.word	0x08005aed
 8005b58:	08005c33 	.word	0x08005c33
 8005b5c:	6833      	ldr	r3, [r6, #0]
 8005b5e:	1d1a      	adds	r2, r3, #4
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6032      	str	r2, [r6, #0]
 8005b64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e09d      	b.n	8005cac <_printf_i+0x1e8>
 8005b70:	6833      	ldr	r3, [r6, #0]
 8005b72:	6820      	ldr	r0, [r4, #0]
 8005b74:	1d19      	adds	r1, r3, #4
 8005b76:	6031      	str	r1, [r6, #0]
 8005b78:	0606      	lsls	r6, r0, #24
 8005b7a:	d501      	bpl.n	8005b80 <_printf_i+0xbc>
 8005b7c:	681d      	ldr	r5, [r3, #0]
 8005b7e:	e003      	b.n	8005b88 <_printf_i+0xc4>
 8005b80:	0645      	lsls	r5, r0, #25
 8005b82:	d5fb      	bpl.n	8005b7c <_printf_i+0xb8>
 8005b84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b88:	2d00      	cmp	r5, #0
 8005b8a:	da03      	bge.n	8005b94 <_printf_i+0xd0>
 8005b8c:	232d      	movs	r3, #45	@ 0x2d
 8005b8e:	426d      	negs	r5, r5
 8005b90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b94:	4859      	ldr	r0, [pc, #356]	@ (8005cfc <_printf_i+0x238>)
 8005b96:	230a      	movs	r3, #10
 8005b98:	e011      	b.n	8005bbe <_printf_i+0xfa>
 8005b9a:	6821      	ldr	r1, [r4, #0]
 8005b9c:	6833      	ldr	r3, [r6, #0]
 8005b9e:	0608      	lsls	r0, r1, #24
 8005ba0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ba4:	d402      	bmi.n	8005bac <_printf_i+0xe8>
 8005ba6:	0649      	lsls	r1, r1, #25
 8005ba8:	bf48      	it	mi
 8005baa:	b2ad      	uxthmi	r5, r5
 8005bac:	2f6f      	cmp	r7, #111	@ 0x6f
 8005bae:	4853      	ldr	r0, [pc, #332]	@ (8005cfc <_printf_i+0x238>)
 8005bb0:	6033      	str	r3, [r6, #0]
 8005bb2:	bf14      	ite	ne
 8005bb4:	230a      	movne	r3, #10
 8005bb6:	2308      	moveq	r3, #8
 8005bb8:	2100      	movs	r1, #0
 8005bba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005bbe:	6866      	ldr	r6, [r4, #4]
 8005bc0:	60a6      	str	r6, [r4, #8]
 8005bc2:	2e00      	cmp	r6, #0
 8005bc4:	bfa2      	ittt	ge
 8005bc6:	6821      	ldrge	r1, [r4, #0]
 8005bc8:	f021 0104 	bicge.w	r1, r1, #4
 8005bcc:	6021      	strge	r1, [r4, #0]
 8005bce:	b90d      	cbnz	r5, 8005bd4 <_printf_i+0x110>
 8005bd0:	2e00      	cmp	r6, #0
 8005bd2:	d04b      	beq.n	8005c6c <_printf_i+0x1a8>
 8005bd4:	4616      	mov	r6, r2
 8005bd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bda:	fb03 5711 	mls	r7, r3, r1, r5
 8005bde:	5dc7      	ldrb	r7, [r0, r7]
 8005be0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005be4:	462f      	mov	r7, r5
 8005be6:	42bb      	cmp	r3, r7
 8005be8:	460d      	mov	r5, r1
 8005bea:	d9f4      	bls.n	8005bd6 <_printf_i+0x112>
 8005bec:	2b08      	cmp	r3, #8
 8005bee:	d10b      	bne.n	8005c08 <_printf_i+0x144>
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	07df      	lsls	r7, r3, #31
 8005bf4:	d508      	bpl.n	8005c08 <_printf_i+0x144>
 8005bf6:	6923      	ldr	r3, [r4, #16]
 8005bf8:	6861      	ldr	r1, [r4, #4]
 8005bfa:	4299      	cmp	r1, r3
 8005bfc:	bfde      	ittt	le
 8005bfe:	2330      	movle	r3, #48	@ 0x30
 8005c00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c04:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005c08:	1b92      	subs	r2, r2, r6
 8005c0a:	6122      	str	r2, [r4, #16]
 8005c0c:	f8cd a000 	str.w	sl, [sp]
 8005c10:	464b      	mov	r3, r9
 8005c12:	aa03      	add	r2, sp, #12
 8005c14:	4621      	mov	r1, r4
 8005c16:	4640      	mov	r0, r8
 8005c18:	f7ff fee6 	bl	80059e8 <_printf_common>
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	d14a      	bne.n	8005cb6 <_printf_i+0x1f2>
 8005c20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c24:	b004      	add	sp, #16
 8005c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	f043 0320 	orr.w	r3, r3, #32
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	4833      	ldr	r0, [pc, #204]	@ (8005d00 <_printf_i+0x23c>)
 8005c34:	2778      	movs	r7, #120	@ 0x78
 8005c36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	6831      	ldr	r1, [r6, #0]
 8005c3e:	061f      	lsls	r7, r3, #24
 8005c40:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c44:	d402      	bmi.n	8005c4c <_printf_i+0x188>
 8005c46:	065f      	lsls	r7, r3, #25
 8005c48:	bf48      	it	mi
 8005c4a:	b2ad      	uxthmi	r5, r5
 8005c4c:	6031      	str	r1, [r6, #0]
 8005c4e:	07d9      	lsls	r1, r3, #31
 8005c50:	bf44      	itt	mi
 8005c52:	f043 0320 	orrmi.w	r3, r3, #32
 8005c56:	6023      	strmi	r3, [r4, #0]
 8005c58:	b11d      	cbz	r5, 8005c62 <_printf_i+0x19e>
 8005c5a:	2310      	movs	r3, #16
 8005c5c:	e7ac      	b.n	8005bb8 <_printf_i+0xf4>
 8005c5e:	4827      	ldr	r0, [pc, #156]	@ (8005cfc <_printf_i+0x238>)
 8005c60:	e7e9      	b.n	8005c36 <_printf_i+0x172>
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	f023 0320 	bic.w	r3, r3, #32
 8005c68:	6023      	str	r3, [r4, #0]
 8005c6a:	e7f6      	b.n	8005c5a <_printf_i+0x196>
 8005c6c:	4616      	mov	r6, r2
 8005c6e:	e7bd      	b.n	8005bec <_printf_i+0x128>
 8005c70:	6833      	ldr	r3, [r6, #0]
 8005c72:	6825      	ldr	r5, [r4, #0]
 8005c74:	6961      	ldr	r1, [r4, #20]
 8005c76:	1d18      	adds	r0, r3, #4
 8005c78:	6030      	str	r0, [r6, #0]
 8005c7a:	062e      	lsls	r6, r5, #24
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	d501      	bpl.n	8005c84 <_printf_i+0x1c0>
 8005c80:	6019      	str	r1, [r3, #0]
 8005c82:	e002      	b.n	8005c8a <_printf_i+0x1c6>
 8005c84:	0668      	lsls	r0, r5, #25
 8005c86:	d5fb      	bpl.n	8005c80 <_printf_i+0x1bc>
 8005c88:	8019      	strh	r1, [r3, #0]
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	6123      	str	r3, [r4, #16]
 8005c8e:	4616      	mov	r6, r2
 8005c90:	e7bc      	b.n	8005c0c <_printf_i+0x148>
 8005c92:	6833      	ldr	r3, [r6, #0]
 8005c94:	1d1a      	adds	r2, r3, #4
 8005c96:	6032      	str	r2, [r6, #0]
 8005c98:	681e      	ldr	r6, [r3, #0]
 8005c9a:	6862      	ldr	r2, [r4, #4]
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	4630      	mov	r0, r6
 8005ca0:	f7fa fabe 	bl	8000220 <memchr>
 8005ca4:	b108      	cbz	r0, 8005caa <_printf_i+0x1e6>
 8005ca6:	1b80      	subs	r0, r0, r6
 8005ca8:	6060      	str	r0, [r4, #4]
 8005caa:	6863      	ldr	r3, [r4, #4]
 8005cac:	6123      	str	r3, [r4, #16]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cb4:	e7aa      	b.n	8005c0c <_printf_i+0x148>
 8005cb6:	6923      	ldr	r3, [r4, #16]
 8005cb8:	4632      	mov	r2, r6
 8005cba:	4649      	mov	r1, r9
 8005cbc:	4640      	mov	r0, r8
 8005cbe:	47d0      	blx	sl
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d0ad      	beq.n	8005c20 <_printf_i+0x15c>
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	079b      	lsls	r3, r3, #30
 8005cc8:	d413      	bmi.n	8005cf2 <_printf_i+0x22e>
 8005cca:	68e0      	ldr	r0, [r4, #12]
 8005ccc:	9b03      	ldr	r3, [sp, #12]
 8005cce:	4298      	cmp	r0, r3
 8005cd0:	bfb8      	it	lt
 8005cd2:	4618      	movlt	r0, r3
 8005cd4:	e7a6      	b.n	8005c24 <_printf_i+0x160>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	4632      	mov	r2, r6
 8005cda:	4649      	mov	r1, r9
 8005cdc:	4640      	mov	r0, r8
 8005cde:	47d0      	blx	sl
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	d09d      	beq.n	8005c20 <_printf_i+0x15c>
 8005ce4:	3501      	adds	r5, #1
 8005ce6:	68e3      	ldr	r3, [r4, #12]
 8005ce8:	9903      	ldr	r1, [sp, #12]
 8005cea:	1a5b      	subs	r3, r3, r1
 8005cec:	42ab      	cmp	r3, r5
 8005cee:	dcf2      	bgt.n	8005cd6 <_printf_i+0x212>
 8005cf0:	e7eb      	b.n	8005cca <_printf_i+0x206>
 8005cf2:	2500      	movs	r5, #0
 8005cf4:	f104 0619 	add.w	r6, r4, #25
 8005cf8:	e7f5      	b.n	8005ce6 <_printf_i+0x222>
 8005cfa:	bf00      	nop
 8005cfc:	08005f49 	.word	0x08005f49
 8005d00:	08005f5a 	.word	0x08005f5a

08005d04 <__malloc_lock>:
 8005d04:	4801      	ldr	r0, [pc, #4]	@ (8005d0c <__malloc_lock+0x8>)
 8005d06:	f7ff bc73 	b.w	80055f0 <__retarget_lock_acquire_recursive>
 8005d0a:	bf00      	nop
 8005d0c:	20000a0c 	.word	0x20000a0c

08005d10 <__malloc_unlock>:
 8005d10:	4801      	ldr	r0, [pc, #4]	@ (8005d18 <__malloc_unlock+0x8>)
 8005d12:	f7ff bc6e 	b.w	80055f2 <__retarget_lock_release_recursive>
 8005d16:	bf00      	nop
 8005d18:	20000a0c 	.word	0x20000a0c

08005d1c <_realloc_r>:
 8005d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d20:	4680      	mov	r8, r0
 8005d22:	4615      	mov	r5, r2
 8005d24:	460c      	mov	r4, r1
 8005d26:	b921      	cbnz	r1, 8005d32 <_realloc_r+0x16>
 8005d28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	f7ff bddb 	b.w	80058e8 <_malloc_r>
 8005d32:	b92a      	cbnz	r2, 8005d40 <_realloc_r+0x24>
 8005d34:	f000 f858 	bl	8005de8 <_free_r>
 8005d38:	2400      	movs	r4, #0
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d40:	f000 f89c 	bl	8005e7c <_malloc_usable_size_r>
 8005d44:	4285      	cmp	r5, r0
 8005d46:	4606      	mov	r6, r0
 8005d48:	d802      	bhi.n	8005d50 <_realloc_r+0x34>
 8005d4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005d4e:	d8f4      	bhi.n	8005d3a <_realloc_r+0x1e>
 8005d50:	4629      	mov	r1, r5
 8005d52:	4640      	mov	r0, r8
 8005d54:	f7ff fdc8 	bl	80058e8 <_malloc_r>
 8005d58:	4607      	mov	r7, r0
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d0ec      	beq.n	8005d38 <_realloc_r+0x1c>
 8005d5e:	42b5      	cmp	r5, r6
 8005d60:	462a      	mov	r2, r5
 8005d62:	4621      	mov	r1, r4
 8005d64:	bf28      	it	cs
 8005d66:	4632      	movcs	r2, r6
 8005d68:	f000 f830 	bl	8005dcc <memcpy>
 8005d6c:	4621      	mov	r1, r4
 8005d6e:	4640      	mov	r0, r8
 8005d70:	f000 f83a 	bl	8005de8 <_free_r>
 8005d74:	463c      	mov	r4, r7
 8005d76:	e7e0      	b.n	8005d3a <_realloc_r+0x1e>

08005d78 <memmove>:
 8005d78:	4288      	cmp	r0, r1
 8005d7a:	b510      	push	{r4, lr}
 8005d7c:	eb01 0402 	add.w	r4, r1, r2
 8005d80:	d902      	bls.n	8005d88 <memmove+0x10>
 8005d82:	4284      	cmp	r4, r0
 8005d84:	4623      	mov	r3, r4
 8005d86:	d807      	bhi.n	8005d98 <memmove+0x20>
 8005d88:	1e43      	subs	r3, r0, #1
 8005d8a:	42a1      	cmp	r1, r4
 8005d8c:	d008      	beq.n	8005da0 <memmove+0x28>
 8005d8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d96:	e7f8      	b.n	8005d8a <memmove+0x12>
 8005d98:	4402      	add	r2, r0
 8005d9a:	4601      	mov	r1, r0
 8005d9c:	428a      	cmp	r2, r1
 8005d9e:	d100      	bne.n	8005da2 <memmove+0x2a>
 8005da0:	bd10      	pop	{r4, pc}
 8005da2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005da6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005daa:	e7f7      	b.n	8005d9c <memmove+0x24>

08005dac <_sbrk_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4d06      	ldr	r5, [pc, #24]	@ (8005dc8 <_sbrk_r+0x1c>)
 8005db0:	2300      	movs	r3, #0
 8005db2:	4604      	mov	r4, r0
 8005db4:	4608      	mov	r0, r1
 8005db6:	602b      	str	r3, [r5, #0]
 8005db8:	f7fb fb7c 	bl	80014b4 <_sbrk>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	d102      	bne.n	8005dc6 <_sbrk_r+0x1a>
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	b103      	cbz	r3, 8005dc6 <_sbrk_r+0x1a>
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	bd38      	pop	{r3, r4, r5, pc}
 8005dc8:	20000a18 	.word	0x20000a18

08005dcc <memcpy>:
 8005dcc:	440a      	add	r2, r1
 8005dce:	4291      	cmp	r1, r2
 8005dd0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005dd4:	d100      	bne.n	8005dd8 <memcpy+0xc>
 8005dd6:	4770      	bx	lr
 8005dd8:	b510      	push	{r4, lr}
 8005dda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005de2:	4291      	cmp	r1, r2
 8005de4:	d1f9      	bne.n	8005dda <memcpy+0xe>
 8005de6:	bd10      	pop	{r4, pc}

08005de8 <_free_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4605      	mov	r5, r0
 8005dec:	2900      	cmp	r1, #0
 8005dee:	d041      	beq.n	8005e74 <_free_r+0x8c>
 8005df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005df4:	1f0c      	subs	r4, r1, #4
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	bfb8      	it	lt
 8005dfa:	18e4      	addlt	r4, r4, r3
 8005dfc:	f7ff ff82 	bl	8005d04 <__malloc_lock>
 8005e00:	4a1d      	ldr	r2, [pc, #116]	@ (8005e78 <_free_r+0x90>)
 8005e02:	6813      	ldr	r3, [r2, #0]
 8005e04:	b933      	cbnz	r3, 8005e14 <_free_r+0x2c>
 8005e06:	6063      	str	r3, [r4, #4]
 8005e08:	6014      	str	r4, [r2, #0]
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e10:	f7ff bf7e 	b.w	8005d10 <__malloc_unlock>
 8005e14:	42a3      	cmp	r3, r4
 8005e16:	d908      	bls.n	8005e2a <_free_r+0x42>
 8005e18:	6820      	ldr	r0, [r4, #0]
 8005e1a:	1821      	adds	r1, r4, r0
 8005e1c:	428b      	cmp	r3, r1
 8005e1e:	bf01      	itttt	eq
 8005e20:	6819      	ldreq	r1, [r3, #0]
 8005e22:	685b      	ldreq	r3, [r3, #4]
 8005e24:	1809      	addeq	r1, r1, r0
 8005e26:	6021      	streq	r1, [r4, #0]
 8005e28:	e7ed      	b.n	8005e06 <_free_r+0x1e>
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	b10b      	cbz	r3, 8005e34 <_free_r+0x4c>
 8005e30:	42a3      	cmp	r3, r4
 8005e32:	d9fa      	bls.n	8005e2a <_free_r+0x42>
 8005e34:	6811      	ldr	r1, [r2, #0]
 8005e36:	1850      	adds	r0, r2, r1
 8005e38:	42a0      	cmp	r0, r4
 8005e3a:	d10b      	bne.n	8005e54 <_free_r+0x6c>
 8005e3c:	6820      	ldr	r0, [r4, #0]
 8005e3e:	4401      	add	r1, r0
 8005e40:	1850      	adds	r0, r2, r1
 8005e42:	4283      	cmp	r3, r0
 8005e44:	6011      	str	r1, [r2, #0]
 8005e46:	d1e0      	bne.n	8005e0a <_free_r+0x22>
 8005e48:	6818      	ldr	r0, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	6053      	str	r3, [r2, #4]
 8005e4e:	4408      	add	r0, r1
 8005e50:	6010      	str	r0, [r2, #0]
 8005e52:	e7da      	b.n	8005e0a <_free_r+0x22>
 8005e54:	d902      	bls.n	8005e5c <_free_r+0x74>
 8005e56:	230c      	movs	r3, #12
 8005e58:	602b      	str	r3, [r5, #0]
 8005e5a:	e7d6      	b.n	8005e0a <_free_r+0x22>
 8005e5c:	6820      	ldr	r0, [r4, #0]
 8005e5e:	1821      	adds	r1, r4, r0
 8005e60:	428b      	cmp	r3, r1
 8005e62:	bf04      	itt	eq
 8005e64:	6819      	ldreq	r1, [r3, #0]
 8005e66:	685b      	ldreq	r3, [r3, #4]
 8005e68:	6063      	str	r3, [r4, #4]
 8005e6a:	bf04      	itt	eq
 8005e6c:	1809      	addeq	r1, r1, r0
 8005e6e:	6021      	streq	r1, [r4, #0]
 8005e70:	6054      	str	r4, [r2, #4]
 8005e72:	e7ca      	b.n	8005e0a <_free_r+0x22>
 8005e74:	bd38      	pop	{r3, r4, r5, pc}
 8005e76:	bf00      	nop
 8005e78:	20000a14 	.word	0x20000a14

08005e7c <_malloc_usable_size_r>:
 8005e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e80:	1f18      	subs	r0, r3, #4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	bfbc      	itt	lt
 8005e86:	580b      	ldrlt	r3, [r1, r0]
 8005e88:	18c0      	addlt	r0, r0, r3
 8005e8a:	4770      	bx	lr

08005e8c <_init>:
 8005e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8e:	bf00      	nop
 8005e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e92:	bc08      	pop	{r3}
 8005e94:	469e      	mov	lr, r3
 8005e96:	4770      	bx	lr

08005e98 <_fini>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	bf00      	nop
 8005e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9e:	bc08      	pop	{r3}
 8005ea0:	469e      	mov	lr, r3
 8005ea2:	4770      	bx	lr
